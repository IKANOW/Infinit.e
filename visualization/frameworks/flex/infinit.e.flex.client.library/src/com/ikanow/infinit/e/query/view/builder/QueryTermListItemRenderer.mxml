<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2012, The Infinit.e Open Source Project.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License, version 3,
   as published by the Free Software Foundation.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:builder="com.ikanow.infinit.e.query.view.builder.*"
	xmlns:common="com.ikanow.infinit.e.shared.view.component.common.*"
	height="30"
	autoDrawBackground="false">

	<fx:Script>
		<![CDATA[
			import com.ikanow.infinit.e.shared.event.QueryEvent;
			import com.ikanow.infinit.e.shared.model.constant.QueryConstants;
			import com.ikanow.infinit.e.shared.model.constant.types.QueryOperatorTypes;
			import com.ikanow.infinit.e.shared.model.vo.QueryTerm;
			import mx.collections.ArrayCollection;
			import mx.core.DragSource;
			import mx.events.DragEvent;
			import mx.graphics.ImageSnapshot;
			import mx.managers.DragManager;
			import spark.components.DataGroup;
			import spark.components.Image;
			import spark.events.IndexChangeEvent;
			
			override public function set data( value:Object ):void
			{
				super.data = value;
				
				if ( value != null )
				{
					queryTerm = value as QueryTerm;
					queryTermCollection = new ArrayCollection( [ queryTerm ] );
					logicOperator = queryTerm.logicOperator;
					list.queryLevel = queryTerm.level;
					list.queryTerm = queryTerm;
					
					isOrphan = list.queryLevel == 0;
					
					invalidateDisplayList();
				}
			}
			
			[Bindable]
			protected var showDeleteButton:Boolean;
			
			[Bindable]
			protected var logicOperator:String;
			
			[Bindable]
			protected var queryTerm:QueryTerm;
			
			[Bindable]
			protected var queryTermCollection:ArrayCollection;
			
			[Bindable]
			protected var isOrphan:Boolean;
			
			protected function deleteButton_clickHandler( event:MouseEvent ):void
			{
				if ( -1 != queryTerm.logicIndex )
				{
					var queryEvent:QueryEvent = new QueryEvent( QueryEvent.DELETE_QUERY_TERM, true, true );
					queryEvent.queryTermObject = queryTerm;
					dispatchEvent( queryEvent );
				}
			}
			
			protected function doubleClickHandler( event:MouseEvent ):void
			{
				if ( -1 != queryTerm.logicIndex )
				{
					var queryEvent:QueryEvent = new QueryEvent( "editQueryTerm", true, true );
					queryEvent.queryTerm = queryTerm;
					dispatchEvent( queryEvent );
				}
			}
			
			protected function logicOperatorSelector_changeHandler( event:IndexChangeEvent ):void
			{
				if ( -1 != queryTerm.logicIndex )
				{
					queryTerm.logicOperator = logicOperatorSelector.selectedItem as String;
					
					dispatchEvent( new Event( "queryOperatorChange", true, true ) );
				}
			}
			
			protected function mouseMoveHandler( event:MouseEvent ):void
			{
				if ( -1 != queryTerm.logicIndex )
				{
					var dragInitiator:QueryTermSkinnableDataContainer = QueryTermSkinnableDataContainer( event.currentTarget );
					var ds:DragSource = new DragSource();
					var bitmapData:BitmapData = ImageSnapshot.captureBitmapData( dragInitiator );
					var image:Image = new Image();
					
					image.source = bitmapData;
					ds.addData( dragInitiator, QueryConstants.DRAG_DATA );
					
					DragManager.doDrag( dragInitiator, ds, event, image );
					
					event.stopImmediatePropagation();
				}
			}
			
			protected function mouseOutHandler( event:MouseEvent ):void
			{
				list.setStyle( "borderAlpha", 0 );
				df.alpha = isOrphan ? 1 : 0;
				showDeleteButton = false;
			}
			
			protected function mouseOverHandler( event:MouseEvent ):void
			{
				list.setStyle( "borderAlpha", 1 );
				df.alpha = 1;
				
				if ( -1 != queryTerm.logicIndex )
				{
					showDeleteButton = true;
				}
				event.stopImmediatePropagation();
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
		<s:State name="normalAndShowsCaret" />
		<s:State name="hoveredAndShowsCaret" />
		<s:State name="selectedAndShowsCaret" />
		<s:State name="dragging" />
	</s:states>

	<s:HGroup id="displayGroup"
		height="100%"
		paddingLeft="2"
		verticalAlign="middle"
		gap="{ ( ( queryTerm.logicIndex == -1 ) ) ? 0 : ( isOrphan ? 8 : 4 ) }">

		<!-- Logic Operator -->
		<s:DropDownList id="logicOperatorSelector"
			width="{ queryTerm.logicIndex == -1 ? 0 : 38 }"
			focusEnabled="false"
			includeInLayout="{ itemIndex != 0 }"
			styleName="queryOperatorDropDownList"
			dataProvider="{ QueryOperatorTypes.types }"
			change="logicOperatorSelector_changeHandler(event)"
			selectedItem="{ logicOperator }"
			visible="{ !( itemIndex == 0 || queryTerm.logicIndex == -1 ) }" />

		<!-- Query Term Group Children List -->
		<builder:QueryTermSkinnableDataContainer id="list"
			height="100%"
			dataProvider="{ queryTermCollection }"
			styleName="advancedQueryTermList"
			doubleClickEnabled="true"
			enabled="{ queryTerm.logicIndex != -1 }"
			doubleClick="doubleClickHandler(event)"
			mouseMove="mouseMoveHandler(event)"
			mouseOut="mouseOutHandler(event)"
			mouseOver="mouseOverHandler(event)"
			buttonMode="true"
			dropEnabled="true"
			itemRenderer="com.ikanow.infinit.e.query.view.builder.QueryTermItemRenderer">
			<builder:layout>
				<s:HorizontalLayout 
					paddingBottom="4"
					paddingLeft="2"
					paddingRight="4"
					paddingTop="4"
					verticalAlign="middle"
					useVirtualLayout="false"
					variableColumnWidth="true" />
			</builder:layout>
			<builder:filters>
				<s:DropShadowFilter id="df"
					color="0x000000"
					alpha="{ isOrphan ? 1 : 0 }"
					angle="45"
					blurX="2"
					blurY="2"
					distance="2" />
			</builder:filters>
		</builder:QueryTermSkinnableDataContainer>

	</s:HGroup>

	<!-- Delete Button -->
	<common:InfButton id="deleteButton"
		styleName="deleteBlackButton"
		y="{ list.y - 1 }"
		x="{ list.x + list.width - 21 }"
		includeInLayout="{ showDeleteButton }"
		click="deleteButton_clickHandler(event)"
		mouseOut="mouseOutHandler(event)"
		mouseOver="mouseOverHandler(event)"
		visible="{ showDeleteButton }" />

</s:ItemRenderer>
