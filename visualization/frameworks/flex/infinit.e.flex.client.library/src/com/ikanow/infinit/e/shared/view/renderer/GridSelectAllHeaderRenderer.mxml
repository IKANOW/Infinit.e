<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2012, The Infinit.e Open Source Project.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License, version 3,
   as published by the Free Software Foundation.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU Affero General Public License for more details.
   
   You should have received a copy of the GNU Affero General Public License
   along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<s:DefaultGridHeaderRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:common="com.ikanow.infinit.e.shared.view.component.common.*"
	styleName="dataGridHeader">

	<fx:Metadata>
		[Event(name="selectAll", type="flash.events.Event")]
		[Event(name="selectNone", type="flash.events.Event")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.dataGridClasses.DataGridListData;
			import spark.components.DataGrid;
			import spark.events.DropDownEvent;
			import assets.EmbeddedAssets;
			
			[Bindable]
			private var options:ArrayList;
			
			protected function selectNone():void
			{
				dispatchEvent( new Event( "selectNone", true ) );
			}
			
			protected function selectOptions_changeHandler():void
			{
				if ( selectOptions.selectedIndex != -1 )
				{
					selectOptions.selectedIndex == 0 ? setlectAll() : selectNone();
				}
				
				selectOptions.selectedIndex = -1;
			}
			
			protected function selectOptions_creationCompleteHandler():void
			{
				options = new ArrayList();
				options.addItem( { label: resourceManager.getString( 'infinite', 'common.selectAll' ) } );
				options.addItem( { label: resourceManager.getString( 'infinite', 'common.selectNone' ) } );
				this.selectOptions.selectedIndex = -1;
			}
			
			protected function selectOptions_openHandler( event:DropDownEvent ):void
			{
				if ( selectOptions.dropDown )
				{
					selectOptions.dropDown.removeEventListener( MouseEvent.MOUSE_OVER, selectOptionsDropDown_onMouseOver );
					selectOptions.dropDown.removeEventListener( MouseEvent.MOUSE_OUT, selectOptionsDropDown_onMouseOut );
					
					selectOptions.dropDown.addEventListener( MouseEvent.MOUSE_OVER, selectOptionsDropDown_onMouseOver, false, 0, true );
					selectOptions.dropDown.addEventListener( MouseEvent.MOUSE_OUT, selectOptionsDropDown_onMouseOut, false, 0, true );
				}
			}
			
			protected function setlectAll():void
			{
				dispatchEvent( new Event( "selectAll", true ) );
			}
			
			private function selectOptionsDropDown_onMouseOut( event:MouseEvent ):void
			{
				selectOptions.closeDropDown( false );
			}
			
			private function selectOptionsDropDown_onMouseOver( event:MouseEvent ):void
			{
				selectOptions.openDropDown();
			}
		]]>
	</fx:Script>

	<s:DropDownList id="selectOptions"
		width="100%"
		height="100%"
		dataProvider="{ options }"
		styleName="selectAllDropDownList"
		change="selectOptions_changeHandler()"
		creationComplete="selectOptions_creationCompleteHandler()"
		mouseOut="selectOptions.closeDropDown( false )"
		mouseOver="selectOptions.openDropDown()"
		open="selectOptions_openHandler(event)" />

</s:DefaultGridHeaderRenderer>
