<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2012, The Infinit.e Open Source Project.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License, version 3,
   as published by the Free Software Foundation.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU Affero General Public License for more details.
   
   You should have received a copy of the GNU Affero General Public License
   along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:common="com.ikanow.infinit.e.shared.view.component.common.*"
	xmlns:textInput="com.ikanow.infinit.e.shared.view.component.textInput.*"
	minWidth="76"
	minHeight="76"
	alpha.disabled="0.5"
	alpha.disabledWithControlBar="0.5"
	blendMode="normal"
	mouseEnabled="false">

	<fx:Metadata>
		<![CDATA[ 
        [HostComponent("spark.components.TitleWindow")]
        ]]>
	</fx:Metadata>

	<fx:Script fb:purpose="styling">
		<![CDATA[
			import mx.core.FlexVersion;
			
			/* Define the skin elements that should not be colorized.
			For panel, border and title background are skinned, but the content area, background, border, and title text are not. */
			private static const exclusions:Array = [ "background", "titleDisplay", "contentGroup", "border" ];
			
			/* exclusions before Flex 4.5 for backwards-compatibility purposes */
			private static const exclusions_4_0:Array = [ "background", "titleDisplay", "contentGroup" ];
			
			/**
			 * @private
			 */
			override public function get colorizeExclusions():Array
			{
				// Since border is styleable via borderColor, no need to allow chromeColor to affect
				// the border.  This is wrapped in a compatibility flag since this change was added  
				// in Flex 4.5
				if ( FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5 )
				{
					return exclusions_4_0;
				}
				
				return exclusions;
			}
			
			private var cornerRadius:Number;
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void
			{
				useChromeColor = true;
				super.initializationComplete();
			}
			
			/**
			 * @private
			 */
			override protected function updateDisplayList( unscaledWidth:Number, unscaledHeight:Number ):void
			{
				var withControls:Boolean =
					( currentState == "disabledWithControlBar" ||
					currentState == "normalWithControlBar" ||
					currentState == "inactiveWithControlBar" );
				
				updateBorderBottomSelected(unscaledWidth, unscaledHeight);
				super.updateDisplayList( unscaledWidth, unscaledHeight );
			}
			
			/**
			 *  @private
			 *  The borderTop s:Path is just a s:Rect with the bottom edge left out.
			 *  Given the rounded corners per the cornerRadius style, the result is 
			 *  roughly an inverted U with the specified width, height, and cornerRadius.
			 * 
			 *  Circular arcs are drawn with two curves per flash.display.Graphics.GraphicsUtil.
			 */        
			private function updateBorderBottomSelected(width:Number, height:Number):void
			{
				// Generate path data and lay it out. The path is not being layout by the default BasicLayout of this skin
				// since we excluded it from the layout.
				try
				{
					var path:String = createBorderBottomPathData(true);
					borderBottomSelected.data = path;
					borderBottomSelected.setLayoutBoundsSize(width, 10, false);
					borderBottomSelected.setLayoutBoundsPosition(0, height, false);
				}catch(e:Error){}
			}
			
			/**
			 *  @private
			 *  This function creates the path data used by borderTop and selectedHighlight.
			 */
			private function createBorderBottomPathData(isBorder:Boolean):String
			{
				var left:Number = 0;
				var right:Number = width;
				var top:Number = 0.5;
				var bottom:Number = height;
				
				var a:Number = cornerRadius * 0.292893218813453;
				var s:Number = cornerRadius * 0.585786437626905;
				
				// If the path is for the highlight,
				// Draw the vertical part of the selected tab highlight that's rendered 
				// with alpha=0.07.  The s:Path is configured to include only the left and 
				// right edges of an s:Rect, along with the top left,right rounded corners. 
				// Otherwise, we draw a full path.
				var path:String = "";
				/*path +=  "M " + 10 + " " + 0;
				path += " L " + 10 + " " + 0 + " " + 10 + " " + 10;
				 path += " L " + ((right / 2) - 10) + " " + bottom + " " + (right / 2) + " " + (bottom + 15);
				path += " L " + (right / 2) + " " + (bottom + 15) + " " + ((right / 2) + 10) + " " + bottom;
				
				path += " L " + ((right / 2) + 10) + " " + bottom + " " + right + " " + bottom; */
				
				return path;
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal" />
		<s:State name="inactive"
			stateGroups="inactiveGroup" />
		<s:State name="disabled" />
		<s:State name="normalWithControlBar"
			stateGroups="withControls" />
		<s:State name="inactiveWithControlBar"
			stateGroups="withControls, inactiveGroup" />
		<s:State name="disabledWithControlBar"
			stateGroups="withControls" />
	</s:states>

	<s:Group 
		bottom="0"
		left="0"
		right="0"
		top="0">

		<!-- background -->
		<s:Rect id="panel"
			width="100%"
			height="100%"
			radiusX="{ hostComponent.getStyle( 'cornerRadius' ) }"
			radiusY="{ hostComponent.getStyle( 'cornerRadius' ) }">
			<s:fill>
				<s:SolidColor color="{ hostComponent.getStyle( 'backgroundColor' ) }" />
			</s:fill>
			<s:filters>
				<s:DropShadowFilter 
					color="0x000000"
					alpha="0.8"
					angle="45"
					blurX="7"
					blurY="7"
					distance="7" />
				<s:DropShadowFilter 
					color="0x000000"
					alpha=".4"
					angle="225"
					blurX="2"
					blurY="2"
					distance="2" />
			</s:filters>
		</s:Rect>

		<!-- layer 3: contents -->
		<!--- Contains the vertical stack of title bar content and control bar. -->
		<s:Group id="contents"
			bottom="1"
			left="1"
			right="1"
			top="1">
			<s:layout>
				<s:VerticalLayout 
					horizontalAlign="justify"
					gap="10" />
			</s:layout>
			<!--- @private -->
			<s:HGroup id="topGroup"
				paddingLeft="0"
				paddingRight="7"
				paddingTop="7">

				<!-- layer 3: text -->
				<!--- @copy spark.components.Panel#titleDisplay -->
				<common:InfLabel id="titleDisplay"
					width="100%"
					minHeight="28"
					styleName="lightGrey"
					height="0"
					textAlign="center"
					verticalAlign="middle"
					maxDisplayedLines="1" />

				<!-- layer 4: moveArea -->
				<!--- @copy spark.components.TitleWindow#moveArea -->
				<s:Group id="moveArea"
					width="0"
					height="0" />

				<!--- @copy spark.components.TitleWindow#closeButton -->
				<s:Group>
					<common:InfButton id="closeButton"
						styleName="closeButton"
						width="15"
						height="15"
						top="6" />
				</s:Group>

			</s:HGroup>

			<!--
				Note: setting the minimum size to 0 here so that changes to the host component's
				size will not be thwarted by this skin part's minimum size.   This is a compromise,
				more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
			-->
			<!--- @copy spark.components.SkinnableContainer#contentGroup -->
			<s:Group id="contentGroup"
				width="100%"
				height="100%"
				minWidth="0"
				minHeight="0">
			</s:Group>

			<!--- @private -->
			<s:Group id="bottomGroup"
				minWidth="0"
				minHeight="0"
				includeIn="withControls">

				<s:Group 
					bottom="0"
					left="0"
					right="0"
					top="0">

					<!-- layer 0: control bar divider line -->
					<s:Rect 
						height="1"
						left="0"
						right="0"
						top="0"
						alpha="0.22">
						<s:fill>
							<s:SolidColor color="0x000000" />
						</s:fill>
					</s:Rect>

					<!-- layer 1: control bar highlight -->
					<s:Rect 
						bottom="0"
						left="0"
						right="0"
						top="1">
						<s:stroke>
							<s:LinearGradientStroke 
								rotation="90"
								weight="1">
								<s:GradientEntry color="0xFFFFFF" />
								<s:GradientEntry color="0xD8D8D8" />
							</s:LinearGradientStroke>
						</s:stroke>
					</s:Rect>

					<!-- layer 2: control bar fill -->
					<s:Rect 
						bottom="1"
						left="1"
						right="1"
						top="2">
						<s:fill>
							<s:LinearGradient rotation="90">
								<s:GradientEntry color="0xEDEDED" />
								<s:GradientEntry color="0xCDCDCD" />
							</s:LinearGradient>
						</s:fill>
					</s:Rect>
				</s:Group>

				<!--- @copy spark.components.Panel#controlBarGroup -->
				<s:Group id="controlBarGroup"
					minWidth="0"
					minHeight="0"
					bottom="1"
					left="0"
					right="0"
					top="1">
					<s:layout>
						<s:HorizontalLayout 
							paddingBottom="7"
							paddingLeft="10"
							paddingRight="10"
							paddingTop="7"
							gap="10" />
					</s:layout>
				</s:Group>
			</s:Group>
		</s:Group>
	</s:Group>
	
	<s:Path id="borderBottomSelected" left="0" right="0" bottom="0" top="0">
		<s:stroke>
			<s:SolidColorStroke color="#ED0B0B" weight="1"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="0x251A1A" alpha="0.85"/>  
		</s:fill>
		<s:filters>
			<s:DropShadowFilter 
				blurX="20" blurY="20" 
				alpha="1" 
				distance="6" 
				angle="45"/>
		</s:filters>
	</s:Path>

	<!--- @copy spark.components.SkinnableContainer#headerGroup -->
	<s:Group id="headerGroup"
		width="100%"
		height="100%"
		minWidth="0"
		minHeight="0">
	</s:Group>

</s:SparkSkin>
