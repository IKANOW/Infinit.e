<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2012, The Infinit.e Open Source Project.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License, version 3,
   as published by the Free Software Foundation.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU Affero General Public License for more details.
   
   You should have received a copy of the GNU Affero General Public License
   along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:component="com.ikanow.infinit.e.shared.view.component.*"
	minWidth="21"
	minHeight="41"
	styleName="dataGridHeader">

	<fx:Declarations>
		<fx:Component id="defaultSortIndicator">
			<s:Path 
				data="M 3.5 7.0 L 0.0 0.0 L 7.0 0.0 L 3.5 7.0"
				implements="spark.components.gridClasses.IGridVisualElement">
				<fx:Script>
					<![CDATA[
						import spark.components.DataGrid;
						import spark.components.Grid;
						
						/**
						 *  @private
						 */
						public function prepareGridVisualElement( grid:Grid, rowIndex:int, columnIndex:int ):void
						{
							const dataGrid:DataGrid = grid.dataGrid;
							
							if ( !dataGrid )
								return;
							
							const color:uint = this.outerDocument.labelDisplay.getStyle( "color" );
							arrowFill1.color = color;
							arrowFill2.color = color;
						}
					]]>
				</fx:Script>

				<s:fill>
					<s:RadialGradient 
						focalPointRatio="1"
						rotation="90">
						<!--- @private -->
						<s:GradientEntry id="arrowFill1"
							color="0"
							alpha="0.6" />
						<!--- @private -->
						<s:GradientEntry id="arrowFill2"
							color="0"
							alpha="0.8" />
					</s:RadialGradient>
				</s:fill>
			</s:Path>
		</fx:Component>

		<s:Label id="labelDisplay"
			styleName="veryLightGreyLarge"
			bottom="0"
			fontWeight="bold"
			left="10"
			right="0"
			textAlign="start"
			top="0"
			verticalAlign="middle"
			verticalCenter="2"
			maxDisplayedLines="1"
			showTruncationTip="true" />

	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import mx.core.IVisualElement;
			import spark.components.DataGrid;
			import spark.components.GridColumnHeaderGroup;
			import spark.components.gridClasses.GridColumn;
			import spark.components.gridClasses.IGridVisualElement;
			import spark.primitives.supportClasses.GraphicElement;
			
			// chrome color constants and variables
			private static const DEFAULT_COLOR_VALUE:uint = 0xCC;
			
			private static const DEFAULT_COLOR:uint = 0xCCCCCC;
			
			private static const DEFAULT_SYMBOL_COLOR:uint = 0x000000;
			
			private static var colorTransform:ColorTransform = new ColorTransform();
			
			private var _maxDisplayedLines:int = 1;
			
			[Bindable( "maxDisplayedLinesChanged" )]
			[Inspectable( minValue = "-1" )]
			
			
			public function get maxDisplayedLines():int
			{
				return _maxDisplayedLines;
			}
			
			/**
			 *  @private
			 */
			public function set maxDisplayedLines( value:int ):void
			{
				if ( value == _maxDisplayedLines )
					return;
				
				_maxDisplayedLines = value;
				
				if ( labelDisplay )
					labelDisplay.maxDisplayedLines = value;
				
				invalidateSize();
				invalidateDisplayList();
				
				dispatchChangeEvent( "maxDisplayedLinesChanged" );
			}
			
			private var _sortIndicator:IFactory;
			
			[Bindable( "sortIndicatorChanged" )]
			
			/**
			 *  A visual element that's displayed when the column is sorted.
			 *
			 *  <p>The sortIndicator visual element is added to the <code>sortIndicatorGroup</code>
			 *  by this renderer's <code>prepare()</code> method.  Any size/location constraints
			 *  specified by the sortIndicator define its location relative to the sortIndicatorGroup.</p>
			 *
			 *  @default null
			 *
			 *  @langversion 3.0
			 *  @playerversion Flash 10
			 *  @playerversion AIR 1.5
			 *  @productversion Flex 4.5
			 */
			public function get sortIndicator():IFactory
			{
				return ( _sortIndicator ) ? _sortIndicator : defaultSortIndicator;
			}
			
			/**
			 *  @private
			 */
			public function set sortIndicator( value:IFactory ):void
			{
				if ( _sortIndicator == value )
					return;
				
				_sortIndicator = value;
				
				if ( sortIndicatorInstance )
				{
					sortIndicatorGroup.includeInLayout = false;
					sortIndicatorGroup.removeElement( sortIndicatorInstance );
					sortIndicatorInstance = null;
				}
				
				invalidateDisplayList();
				dispatchChangeEvent( "sortIndicatorChanged" );
			}
			
			private var sortIndicatorInstance:IVisualElement;
			
			private var chromeColorChanged:Boolean = false;
			
			private var colorized:Boolean = false;
			
			/**
			 *  @private
			 *  Create and add the sortIndicator to the sortIndicatorGroup and the
			 *  labelDisplay into the labelDisplayGroup.
			 */
			override public function prepare( hasBeenRecycled:Boolean ):void
			{
				super.prepare( hasBeenRecycled );
				
				if ( labelDisplay && labelDisplayGroup && ( labelDisplay.parent != labelDisplayGroup ) )
				{
					labelDisplayGroup.removeAllElements();
					labelDisplayGroup.addElement( labelDisplay );
				}
				
				const column:GridColumn = this.column;
				
				if ( sortIndicator && column && column.grid && column.grid.dataGrid && column.grid.dataGrid.columnHeaderGroup )
				{
					const dataGrid:DataGrid = column.grid.dataGrid;
					const columnHeaderGroup:GridColumnHeaderGroup = dataGrid.columnHeaderGroup;
					
					if ( columnHeaderGroup.isSortIndicatorVisible( column.columnIndex ) )
					{
						if ( !sortIndicatorInstance )
						{
							sortIndicatorInstance = sortIndicator.newInstance();
							sortIndicatorGroup.addElement( sortIndicatorInstance );
							chromeColorChanged = true;
							invalidateDisplayList();
						}
						
						// Initialize sortIndicator
						sortIndicatorInstance.visible = true;
						const gridVisualElement:IGridVisualElement = sortIndicatorInstance as IGridVisualElement;
						
						if ( gridVisualElement )
							gridVisualElement.prepareGridVisualElement( column.grid, -1, column.columnIndex );
						
						sortIndicatorGroup.includeInLayout = true;
						sortIndicatorGroup.scaleY = ( column.sortDescending ) ? 1 : -1;
					}
					else
					{
						if ( sortIndicatorInstance )
						{
							sortIndicatorGroup.removeElement( sortIndicatorInstance );
							sortIndicatorGroup.includeInLayout = false;
							sortIndicatorInstance = null;
						}
					}
				}
			}
			
			/**
			 *  @private
			 */
			override public function styleChanged( styleProp:String ):void
			{
				var allStyles:Boolean = !styleProp || styleProp == "styleName";
				
				super.styleChanged( styleProp );
				
				if ( allStyles || styleProp == "chromeColor" )
				{
					chromeColorChanged = true;
					invalidateDisplayList();
				}
			}
			
			/**
			 *  @private
			 *  Apply chromeColor style.
			 */
			override protected function updateDisplayList( unscaledWidth:Number, unscaledHeight:Number ):void
			{
				// Apply chrome color
				if ( chromeColorChanged )
				{
					var chromeColor:uint = getStyle( "chromeColor" );
					
					if ( chromeColor != DEFAULT_COLOR || colorized )
					{
						colorTransform.redOffset = ( ( chromeColor & ( 0xFF << 16 ) ) >> 16 ) - DEFAULT_COLOR_VALUE;
						colorTransform.greenOffset = ( ( chromeColor & ( 0xFF << 8 ) ) >> 8 ) - DEFAULT_COLOR_VALUE;
						colorTransform.blueOffset = ( chromeColor & 0xFF ) - DEFAULT_COLOR_VALUE;
						colorTransform.alphaMultiplier = alpha;
						
						transform.colorTransform = colorTransform;
						
						var exclusions:Array = [ labelDisplay, sortIndicatorInstance ];
						
						// Apply inverse colorizing to exclusions
						if ( exclusions && exclusions.length > 0 )
						{
							colorTransform.redOffset = -colorTransform.redOffset;
							colorTransform.greenOffset = -colorTransform.greenOffset;
							colorTransform.blueOffset = -colorTransform.blueOffset;
							
							for ( var i:int = 0; i < exclusions.length; i++ )
							{
								var exclusionObject:Object = exclusions[ i ];
								
								if ( exclusionObject &&
									( exclusionObject is DisplayObject ||
									exclusionObject is GraphicElement ) )
								{
									colorTransform.alphaMultiplier = exclusionObject.alpha;
									exclusionObject.transform.colorTransform = colorTransform;
								}
							}
						}
						
						colorized = true;
					}
					
					chromeColorChanged = false;
				}
				
				super.updateDisplayList( unscaledWidth, unscaledHeight );
			}
			
			/**
			 *  @private
			 */
			private function dispatchChangeEvent( type:String ):void
			{
				if ( hasEventListener( type ) )
					dispatchEvent( new Event( type ) );
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="down" />
	</s:states>

	<s:Rect 
		width="100%"
		height="100%">
		<s:fill>
			<s:SolidColor color="{ this.getStyle( 'backgroundColor' ) }" />
		</s:fill>
	</s:Rect>

	<s:HGroup 
		bottom="5"
		left="7"
		right="7"
		top="5"
		verticalAlign="middle"
		gap="2">

		<!-- label display group  -->
		<s:Group id="labelDisplayGroup"
			width="100%" />

		<!-- sort arrow -->
		<s:Group id="sortIndicatorGroup"
			includeInLayout="false" />

	</s:HGroup>

</s:GridItemRenderer>
