<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="infinit.e.processing.generic.library" default="dist" basedir=".">

	<property name="dir.src" value="src"/>
	<property name="dir.src.test" value="test" />
	<property name="dir.lib" value="lib"/>
	<property name="dir.build" value="build"/>
	<property name="dir.build.classes" value="${dir.build}/classes"/>
	<property name="dir.build.test.classes" value="${dir.build}/test-classes"/>
	<property name="dir.build.test.reports" value="${dir.build}/test-reports"/>
	<property name="dir.build.jar" value="${dir.build}/jar"/>
	<property name="dir.dist" value="dist"/>
	<property name="infinit.e.data_model.location" value="../infinit.e.data_model"/>
	<property name="infinit.e.harvest.library.location" value="../infinit.e.harvest.library"/>
	<!-- ELASTICSEARCH - note these are just the binaries, no source mods here -->
	<property name="infinit.e.elasticsearch.driver.location" value="../infinit.e.elasticsearch.driver"/>
	
	<property name="target" value="1.8"/>
	<property name="source" value="1.8"/>
	
	<property name="debuglevel" value="source,lines,vars"/>	
	<property name="test.pattern" value="**/**Test.java" />
		
	<property name="bamboo.majorBuild" value="localBuild"/>
	<property name="bamboo.minorBuild" value="0"/>
	<property name="bamboo.custom.svn.revision.number" value="0"/>	
	<property name="infinite_version" value="${bamboo.majorBuild}.${bamboo.minorBuild}"/>
	<property name="infinite_release" value="${bamboo.custom.svn.revision.number}"/>	
	<property name="manifest.name" value="com/ikanow/infinit/e"/>
	<property name="specification.title" value="Infinit.e data model classes"/>
	<property name="specification.version" value="${infinite_version}-${infinite_release}"/>
	<property name="specification.vendor" value="IKANOW"/>
	<property name="implementation.title" value="Infinit.e data model classes"/>
	<property name="implementation.version" value="${infinite_version}-${infinite_release}"/>
	<property name="implementation.vendor" value="IKANOW"/>
				
	<path id="infinit.e.data_model.classpath">
	     <pathelement location="${infinit.e.data_model.location}/dist/infinit.e.data_model.jar"/>
	</path>
	<path id="infinit.e.harvest.library.classpath">
	     <pathelement location="${infinit.e.harvest.library.location}/dist/infinit.e.harvest.library.jar"/>
	</path>
	<!-- ELASTICSEARCH - note these are just the binaries, no source mods here -->
	<path id="infinit.e.elasticsearch.driver.classpath">
    	<fileset dir="${infinit.e.elasticsearch.driver.location}/lib">
        	<include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="infinit.e.processing.generic.library.classpath">
        <pathelement location="${dir.build.classes}"/>
    	
    	<fileset dir="lib">
        	<include name="**/*.jar"/>
        </fileset>

        <path refid="infinit.e.data_model.classpath"/>
        <path refid="infinit.e.harvest.library.classpath"/>
    	<!-- ELASTICSEARCH - note these are just the binaries, no source mods here -->
        <path refid="infinit.e.elasticsearch.driver.classpath"/>    	
	</path>
	
	<!-- ================================= 
		     target: clean              
	================================= -->
	<target name="clean" description="Removing the all generated files.">
		<delete dir="${dir.build}"/>
		<delete dir="${dir.dist}"/>
	</target>

	<!-- ================================= 
	     target: prepare             
	================================= -->
	<target name="prepare" depends="clean">
		<mkdir dir="${dir.build}"/>
	</target>
	
	<!-- ================================= 
      target: resolve     
      use apache ivy to pull in dependencies         
     ================================= -->
	
	<target name="resolve" depends="prepare" description="retrieve dependencies with ivy">
		<!--
		<ivy:configure file="./ivysettings.xml" />
		<ivy:retrieve/>
		-->
	</target>
	
	
	<!-- ================================= 
	  target: compile  
	  compile the source code using javac            
	================================= -->
	<target name="compile" depends="resolve" description="Compilation of all source code.">
		<mkdir dir="${dir.build.classes}"/>
		<javac debug="true" includeantruntime="false" debuglevel="${debuglevel}" srcdir="${dir.src}" destdir="${dir.build.classes}" source="${source}" target="${target}">
			<classpath refid="infinit.e.processing.generic.library.classpath"/>
			</javac>
	</target>
	
	<!-- =================================
				target: compile-tests
	==================================-->
	<!-- No tests  for the moment
	-->
		
	<!-- =================================
			target: test
	==================================-->
	<!-- No tests  for the moment
	-->
	
	<!-- ================================= 
			     target: jar              
		================================= -->
	<target name="jar" depends="compile" description="Generates ${ant.project.name}.jar file in to the '${dir.build.jar}' directory.">
		<mkdir dir="${dir.build.jar}"/>

		<!-- create a property containing all .jar files, without prefix, and seperated with a space -->
		<pathconvert property="libs.jar.bundled" pathsep=" ">
			<mapper>
				<chainedmapper>
				<!-- remove absolute path -->
				<flattenmapper />
				<!-- add lib/ prefix -->
				<globmapper from="*" to="*" />
				  </chainedmapper>
			</mapper>
			<path>
			  <!-- Get a list of all the excluded files, add manually to classpath -->
			  <fileset dir="${dir.lib}" includes="jsr*.jar jtds*.jar jcifs*.jar tika*.jar RangeMap.jar"/>
			</path>
		</pathconvert>

		<!-- Copy XML resources into build file so they end up in a JAR -->
		<copy todir="${dir.build.classes}">
		    <fileset dir="${dir.src}" includes="**/*.xml,**/*.properties,**/*.txt,**/*.ico" />
		</copy>		
		
		<!-- Bundled Jar for processing.generic with required libraries -->
		<jar destFile="${dir.build.jar}/${ant.project.name}.jar" basedir="${dir.build.classes}"  filesetmanifest="mergewithoutmain">
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Class-Path" value=". ${libs.jar.bundled}"/>
				<attribute name="Specification-Title" value="${specification.title}"/>
				<attribute name="Specification-Version" value="${specification.version}"/>
				<attribute name="Specification-Vendor" value="${specification.vendor}"/>
				<attribute name="Implementation-Title" value="${implementation.title}"/>
				<attribute name="Implementation-Version" value="${implementation.version}"/>
				<attribute name="Implementation-Vendor" value="${implementation.vendor}"/>
			</manifest>
			<fileset dir="${dir.build.classes}"/>

	  		<!-- Can't distribute jcifs.jar or tika-app.jar jtds.jar jsr*.jar in JAR due to OSS restrictions or RangeMap.jar -->
			<zipgroupfileset dir="${dir.lib}" includes="*.jar" excludes="RangeMap.jar jsr*.jar jtds*.jar jcifs*.jar tika*.jar META-INF/*.SF junit.jar"/>
		</jar>
	</target>
	
	<!-- ================================= 
			     target: dist              
		================================= -->
	<target name="dist" depends="jar" description="Create binary distribution">
		  <!-- contains the jars -->
		  <mkdir dir="${dir.dist}" />
		
		  <!-- copy the bundled jars into the bundled directory -->
		  <copy file="${dir.build.jar}/${ant.project.name}.jar" tofile="${dir.dist}/${ant.project.name}.jar"/>
	</target>
</project>