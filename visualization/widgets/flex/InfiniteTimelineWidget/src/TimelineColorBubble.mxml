<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2012, The Infinit.e Open Source Project
   
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
   
   http://www.apache.org/licenses/LICENSE-2.0
   
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<actionscript:TimelineExpandCollapseRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:actionscript="actionscript.*"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	currentState="baseState"
	height.baseState="{ baseStateHeight }"
	width.baseState="{ baseStateWidth }"
	height.expanded="{ this.owner.height - 80 }"
	width.expanded="{ this.owner.width - 80 }"
	x.expanded="40"
	y.expanded="40"
	dataChange="onDataChange(event)"
	includeInLayout.expanded="false"
	click.baseState="highlightSkin(event)"
	creationComplete="init()"
	contentBackgroundColor="{ getMediaColor( data.mediaType ) }"
	depth.expanded="2"
	highlighted="false">
	<actionscript:states>
		<s:State name="baseState" />
		<s:State name="expanded" />
	</actionscript:states>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import com.ibm.ilog.elixir.timeline.components.supportClasses.TimelineBandBase;
			import com.ikanow.infinit.e.widget.library.utility.ColorConfig;
			import com.ikanow.infinit.e.widget.library.utility.HtmlConvert;
			import com.ikanow.infinit.e.widget.library.utility.JSONEncoder;
			
			import mx.controls.Alert;
			import mx.controls.LinkButton;
			import mx.controls.Spacer;
			import mx.core.UIComponent;
			import mx.graphics.SolidColorStroke;
			
			import spark.primitives.Line;
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.elements.TextFlow;
			
			[Bindable]
			private var iconized:Boolean = false;
			[Bindable]
			private var baseStateHeight:int = 70;
			[Bindable]
			private var baseStateWidth:int = 200;
			
			private function onDataChange(event:Event):void
			{
				if (null != data) {
					var timelinemod:InfiniteTimelineWidget = this.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent as InfiniteTimelineWidget;
					iconize(timelinemod.isIconized());
					timelinemod.addNode( this );
				}
			}
			
			public function iconize(iconize:Boolean):void
			{
				iconized = iconize;
				if (iconized)
				{
					baseStateHeight = 35;
					baseStateWidth = 35;
				}
				else
				{
					baseStateHeight = 70;
					baseStateWidth = 200;
				}
			}
			
			public function hightlightNode( highlight_now:Boolean ):void
			{
				
				highlighted = !highlight_now;
				highlightSkin( null );
			}
			private function formatHtmlText( unformatted:String ):String
			{
				return HtmlConvert.convertEntities( unformatted );
			}
			
			/**
			 * function to format the text for the timeline labels
			 *
			 * @param title The title of the current feed
			 *
			 * @return The formatted title
			 */
			private function formatText( title:String, signif:String ):TextFlow
			{
				var newTitle:String = title;
				var newSignif:String = new Number( signif ).toFixed( 1 ).toString();
				var MAXLENGTH:int = 50 - newSignif.length;
				
				if ( newTitle.length > MAXLENGTH )
				{
					newTitle = HtmlConvert.convertEntities( title.substring( 0, MAXLENGTH - 3 ) ) + "...";
				}
				else
				{
					newTitle = HtmlConvert.convertEntities( title.substring( 0, MAXLENGTH ) );
				}
				
				return TextConverter.importToFlow(newTitle + " (Score: " + newSignif + ")", TextConverter.TEXT_FIELD_HTML_FORMAT);
			}
			
			/**
			 * function to get the media color based on its media type
			 *
			 * @param mediaType The media type of the current feed
			 *
			 * @return The color for the media type
			 */
			private function getMediaColor( mediaType:String ):uint
			{
				var mediaTypeUC:String = mediaType.toLowerCase();
				
				if ( mediaType != null )
				{
					if ( mediaTypeUC == "news" )
						return ColorConfig.MEDIATYPE_NEWS;
					else if ( mediaTypeUC == "social" )
						return ColorConfig.MEDIATYPE_SOCIAL;
					else if ( mediaTypeUC == "video" )
						return ColorConfig.MEDIATYPE_VIDEO;
					else if ( mediaTypeUC == "discussion" )
						return ColorConfig.MEDIATYPE_DISCUSSION;
					else if ( mediaTypeUC == "blog" )
						return ColorConfig.MEDIATYPE_BLOG;
					else if ( mediaTypeUC == "report" )
						return ColorConfig.MEDIATYPE_INTEL;
					else if ( mediaTypeUC == "intel" )
						return ColorConfig.MEDIATYPE_INTEL;
					else if ( mediaTypeUC == "record" )
						return ColorConfig.MEDIATYPE_RECORD;
					else if ( mediaTypeUC == "imagery" )
						return ColorConfig.MEDIATYPE_IMAGERY;
				}
				return ColorConfig.MEDIATYPE_NONE;
			}
			
			/**
			 * function to highlight the skin
			 *
			 * @param event The MouseEvent received when the skin is clicked
			 */
			private function highlightSkin( event:MouseEvent ):void
			{
				if ( !highlighted )
				{
					bContainer.setStyle( "borderColor", "0xCC0000" );
					bContainer.setStyle( "borderWeight", "2" );
					bContainer.setStyle( "borderVisible", "true" );

				}
				else if ( highlighted )
				{
					bContainer.setStyle( "borderColor", "0x000000" );
					bContainer.setStyle( "borderWeight", "1" );
					bContainer.setStyle( "borderVisible", "false" );
				}
				highlighted = !highlighted;
				if (null != data)
				{
					data[ "highlighted" ] = highlighted;
				}
			}
			
			/**
			 * function to set default values on creation
			 *
			 */
			private function init():void
			{
			}
			
			/**
			 * Determines what action to take when a title/url is clicked.
			 * If the item is a website will open site in a new tab.  If
			 * it is a record will Alert show the metadata fields, otherwise will
			 * show the description.
			 **/
			private function labelClick( data:Object ):void
			{
				var url:String = getDisplayableUrl( data );
				navigateToUrl( url );
			}
			
			/**
			 * function to navigate to the url of the feed
			 *
			 * @param _url The url of the feed
			 */
			private function navigateToUrl( _url:String ):void
			{
				var url:URLRequest = new URLRequest( _url );
				navigateToURL( url, "_blank" );
			}
			
			/**
			 * function to switch the states of the item renderer
			 * to show more data for the feed
			 *
			 * @param event The MouseEvent received when an expand or collapse is requested
			 */
			private function switchStates( event:MouseEvent ):void
			{
				expanded = !expanded;
				event.stopImmediatePropagation();
			}
			
			private function getDisplayableUrl(repeaterItem: Object):String
			{
				var urlStr;
				if ( null != repeaterItem.displayUrl && (repeaterItem.displayUrl is String) && ( (repeaterItem.displayUrl as String).length > 0 ) )
				{
					if ( repeaterItem.displayUrl.indexOf( "http://" ) > -1 || repeaterItem.displayUrl.indexOf( "https://" ) > -1 )
					{			
						urlStr = repeaterItem.displayUrl;
					}
					else if (0 == repeaterItem.displayUrl.indexOf("$infinite/"))
					{
						urlStr = ExternalInterface.call( "getEndPointUrl" ).replace("/api/", "/") + repeaterItem.displayUrl.substring(10);
					}
					else // must be a relative path ... ie for files
					{
						urlStr = ExternalInterface.call( "getEndPointUrl" ) + "knowledge/document/file/get/" + repeaterItem.sourceKey + "/" + 
							repeaterItem.displayUrl;
					}
				}
				else if ( repeaterItem.url.indexOf( "http://" ) > -1 || repeaterItem.url.indexOf( "https://" ) > -1 )
				{
					urlStr = repeaterItem.url;
				}
				else if ( ( null != repeaterItem.metadata ) && ( null != repeaterItem.sourceKey ) &&
					( null != repeaterItem.metadata["_FILE_METADATA_"] ) && ( null != repeaterItem.metadata["_FILE_METADATA_"][0]["InfinitePath"] ) )
				{
					// (since displayUrl, this is a legacy case...)
					
					urlStr = ExternalInterface.call( "getEndPointUrl" ) + "knowledge/document/file/get/" + repeaterItem.sourceKey + "/" + 
						repeaterItem.metadata["_FILE_METADATA_"][0]["InfinitePath"];
				}
				else
				{
					urlStr = ExternalInterface.call( "getEndPointUrl" ) + "knowledge/document/get/" + repeaterItem._id + "?returnRawData=true";
				}
				return urlStr;
			}
		]]>
	</fx:Script>

	<s:BorderContainer id="bContainer" 
		width="{ baseStateWidth }"
		height="{ baseStateHeight }"
		borderColor="0x000000"
		borderStyle="inset"
		cornerRadius="8"
		borderWeight="1"
		contentBackgroundColor="{ getMediaColor( data.mediaType ) }"
		includeIn="baseState">
		<s:backgroundFill>
			<s:LinearGradient rotation="90">
				<s:entries>
					<s:GradientEntry color="0xFFFFFF" />
					<s:GradientEntry color="{ getMediaColor( data.mediaType ) }" />
				</s:entries>
			</s:LinearGradient>
		</s:backgroundFill>
		<s:Label id="ranking"
				  x="5" y="16"
				  visible="{ iconized }"
				 includeIn="baseState"
				 text="#{ data.ranking }"
				 />
		<s:HGroup 
			visible="{ iconized }"
			x="18"
			width="100%"
			verticalAlign="middle"
			contentBackgroundColor="{ getMediaColor( data.mediaType ) }"
			includeIn="baseState">
			<s:Button id="expandWindowIconized"
					  click="switchStates(event)"
					  includeIn="baseState"
					  skinClass.baseState="skins.InfiniteEntityAliasesButtonSkin" />
		</s:HGroup>
		<s:VGroup 
			visible="{ !iconized }"
			width="100%"
			height="100%"
			bottom="0"
			horizontalAlign="left"
			left="0"
			paddingBottom="5"
			paddingLeft="5"
			paddingRight="5"
			paddingTop="5"
			right="0"
			top="0"
			verticalAlign="top"
			contentBackgroundColor="{ getMediaColor( data.mediaType ) }"
			includeIn="baseState">
			<s:HGroup id="topgroup"
				height="15"
				width="100%"
				horizontalAlign="left"
				verticalAlign="middle"
				contentBackgroundColor="{ getMediaColor( data.mediaType ) }"
				includeIn="baseState">
				<s:Label id="timeDate"
					x="0"
					y="0"
					text="{ (data.publishedDate as String).replace(' UTC', '') }"
					fontWeight="bold"
					includeIn="baseState" />

				<s:HGroup 
					width="100%"
					horizontalAlign="right"
					verticalAlign="middle"
					contentBackgroundColor="{ getMediaColor( data.mediaType ) }"
					includeIn="baseState">
					<s:Button id="expandWindow"
						click="switchStates(event)"
						includeIn="baseState"
						skinClass.baseState="skins.InfiniteEntityAliasesButtonSkin" />
				</s:HGroup>
			</s:HGroup>
			<s:RichText id="article"
					 height="44" 
					 textFlow="{ formatText( data.title, data.score ) }"
					 width="{ topgroup.width }"
					 fontWeight="bold"
					 includeIn="baseState"
					 lineBreak="toFit" />
		</s:VGroup>
	</s:BorderContainer>
		
	<s:BorderContainer id="bContainerExpanded"
		width="100%"
		height="100%"
		backgroundColor="0xFFFFFF"
		borderColor="{ getMediaColor( data.mediaType ) }"
		borderStyle="solid"
		cornerRadius="8"
		borderWeight="3"
		contentBackgroundColor="0xFFFFFF"
		includeIn="expanded">
		<s:VGroup 
			width="{ bContainerExpanded.width }"
			height="{ bContainerExpanded.height }"
			horizontalAlign="left"
			paddingBottom="5"
			paddingLeft="5"
			paddingRight="5"
			paddingTop="5"
			verticalAlign="top"
			contentBackgroundColor="0xFFFFFF"
			includeIn="expanded">
			<!--<s:HGroup id="topgroupExpanded" width="100%" verticalAlign="middle" includeIn="expanded" contentBackgroundColor="0xFFFFFF">


			</s:HGroup>	-->
			<s:Label id="timeDateExpanded"
				width="100%"
				text="{ data.publishedDate }"
				fontWeight="bold"
				includeIn="expanded" />
			<mx:Label id="articleExpanded"
				htmlText="{ formatHtmlText( data.title ) }"
				maxWidth="{ bContainerExpanded.width - 20 }"
				color="blue"
				fontSize="14"
				fontWeight="bold"
				textDecoration="underline"
				click="{ labelClick( data ) }"
				buttonMode="true"
				includeIn="expanded"
				mouseChildren="false"
				useHandCursor="true" />
			<mx:LinkButton id="link"
				label="{ getDisplayableUrl( data ) }"
				maxWidth="{ bContainerExpanded.width - 20 }"
				toolTip="[Mouse: open URL in new tab]"
				color="green"
				fontSize="12"
				textAlign="left"
				click="{ labelClick( data ) }" />
			<mx:Text id="snippet"
				width="100%"
				height="100%"
				htmlText="{ formatHtmlText( data.description ) }"
				fontSize="12" />
			<!--<mx:Spacer height="5"/>-->

		</s:VGroup>
		<s:Button id="expandWindowExpanded"
			width="15"
			height="15"
			right="12"
			top="5"
			click="switchStates(event)"
			includeIn="expanded"
			skinClass.expanded="skins.TimelineMinimizeButtonSkin" />
	</s:BorderContainer>
</actionscript:TimelineExpandCollapseRenderer>
