<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright 2012, The Infinit.e Open Source Project

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:views="views.*"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	creationComplete="vgroup1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSONDecoder;
			import com.adobe.serialization.json.JSONEncoder;
			import com.adobe.utils.StringUtil;
			
			import events.CommunityEvent;
			
			import flash.utils.Timer;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			import mx.events.ListEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.managers.PopUpManagerChildList;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import objects.Community;
			import objects.CommunityAttribute;
			
			import renderers.GridTextItemRenderer;
			
			import spark.components.Button;
			import spark.components.Label;
			import spark.events.TextOperationEvent;
			
			import util.Constants;
			import util.DateConverter;
			
			import views.Communities;
			
			private static var ENDPOINT_URL:String = flash.external.ExternalInterface.call( "getEndPointUrl" );
			
			[Bindable]
			
			[Embed( source = "assets/greencheck.png" )]
			public var greencheck:Class;
			
			[Bindable]
			
			[Embed( source = "assets/redx.png" )]
			public var redx:Class;
			
			[Bindable]
			
			[Embed( source = "assets/yellowexclamation.png" )]
			public var yellowexclamation:Class;
			
			private var refreshTimer:Timer = null;
			
			[Bindable]
			private var currsourceData:ArrayCollection = new ArrayCollection();
			
			private var sourceData:ArrayCollection = new ArrayCollection();
			
			private var communitiesData:ArrayCollection = new ArrayCollection();
			
			private var communityData:ArrayCollection;
			
			private var timer:Timer = new Timer( 5000 );
			
			private var sortFlip:Boolean = false;
			
			private var sortLast:String = "";
			
			private var communitiesPopup:Communities;
			
			private var selectedCommunities:ArrayCollection;
			
			[Bindable]
			private var searchTerm:String;
			
			private var count:int = 0;
			
			/**
			 * This method checks to see if one item is in a collection.  The id is used
			 * to do the matching.
			 *
			 * @param collection The collection containing the original item
			 * @param item The updated item
			 * @param idField The field used to match the items
			 *
			 * @return If the collection contains the item or not
			 */
			public static function doesCollectionContainItem( collection:IList, item:Object, idField:String = "_id" ):Boolean
			{
				var currentItem:Object;
				
				if ( collection && item )
				{
					for ( var i:uint = 0; i < collection.length; i++ )
					{
						currentItem = collection.getItemAt( i );
						
						if ( currentItem.hasOwnProperty( idField ) && item.hasOwnProperty( idField ) && currentItem[ idField ] == item[ idField ] )
						{
							return true;
						}
					}
				}
				return false;
			}
			
			/**
			 * This method replaces one item in a collection with an updated version.  The id is used
			 * to do the matching.
			 *
			 * @param collection The collection containing the original item
			 * @param item The updated item
			 * @param idField The field used to match the items
			 */
			public static function replaceItemById( collection:IList, item:Object, idField:String = "_id" ):void
			{
				var currentItem:Object;
				
				if ( collection && item )
				{
					var len:int = collection.length;
					
					for ( var i:uint = 0; i < len; i++ )
					{
						currentItem = collection.getItemAt( i );
						
						if ( currentItem[ idField ] == item[ idField ] )
						{
							collection.setItemAt( item, i );
							return;
						}
					}
				}
				return;
			}
			
			/**
			 * funciton to clear the data in the provider
			 * for the grid
			 */
			public function clearSources():void
			{
				sourceData.removeAll();
				currsourceData.removeAll();
			}
			
			public function closeCommunitiesPopup( event:Event = null ):void
			{
				if ( communitiesPopup )
				{
					communitiesPopup.removeEventListener( FlexMouseEvent.MOUSE_DOWN_OUTSIDE, communitiesPopup_clickOutsideHandler );
					communitiesPopup.removeEventListener( CloseEvent.CLOSE, closeCommunitiesPopup );
					PopUpManager.removePopUp( communitiesPopup );
					communitiesPopup = null;
					communitiesButton.selected = false;
				}
			}
			
			public function loadCommunityData( communityInfo:ArrayCollection ):void
			{
				communitiesData = communityInfo;
			}
			
			public function loadSelectedCommunityData( selectedCommunities:ArrayCollection ):void
			{
				this.selectedCommunities = selectedCommunities;
			}
			
			public function loadSourceData( communityInfo:ArrayCollection ):void
			{
				communityData = communityInfo;
				// Not currently supported:
				var commString:String = "";
				
				for each ( var o:Object in communityData )
				{
					commString += o._id + ",";
				}
				commString = commString.substring( 0, commString.length - 1 );
				goodSourceService.url = ENDPOINT_URL + "custom/mapreduce/getjobs?commids=" + commString;
				goodSourceService.send();
				
				if ( null == refreshTimer )
				{
					refreshTimer = new Timer( 180000 ); // (5mins)
					refreshTimer.addEventListener( TimerEvent.TIMER, onRefreshTimerComplete );
					refreshTimer.start();
				}
				else
				{
					refreshTimer.stop();
					refreshTimer.start();
				}
			}
			
			
			protected function communitiesButton_clickHandler( event:MouseEvent ):void
			{
				if ( communitiesPopup )
				{
					closeCommunitiesPopup();
				}
				else
				{
					communitiesPopup = PopUpManager.createPopUp( DisplayObject( FlexGlobals.topLevelApplication ), Communities, false, PopUpManagerChildList.APPLICATION ) as Communities;
					communitiesPopup.setCommunities( communitiesData );
					communitiesPopup.addEventListener( CommunityEvent.COMMUNITY_JOINED, handleCommunityJoinedEvent );
					communitiesPopup.addEventListener( CommunityEvent.SELECT_COMMUNITY, handleSelectCommunityEvent );
					communitiesPopup.addEventListener( FlexMouseEvent.MOUSE_DOWN_OUTSIDE, communitiesPopup_clickOutsideHandler, false, 0, true );
					communitiesPopup.addEventListener( CloseEvent.CLOSE, closeCommunitiesPopup, false, 0, true );
					
					positionCommunitiesPopup();
				}
			}
			
			protected function communitiesPopup_clickOutsideHandler( event:Event ):void
			{
				if ( event is MouseEvent && communitiesPopup )
				{
					var mouseEvent:MouseEvent = MouseEvent( event );
					
					if ( mouseEvent.target != communitiesPopup || mouseEvent.relatedObject == communitiesButton )
					{
						return;
					}
					
					if ( !communitiesPopup.hitTestPoint( mouseEvent.stageX, mouseEvent.stageY, true ) )
					{
						closeCommunitiesPopup();
					}
				}
			}
			
			protected function filterTextInput_clearHandler():void
			{
				searchTerm = Constants.BLANK;
				currsourceData.filterFunction = null;
				currsourceData.refresh();
			}
			
			protected function filterTextInput_focusInHandler():void
			{
				if ( filterInput.text.length > 0 )
					filterInput.selectRange( filterInput.text.length, filterInput.text.length );
			}
			
			protected function filter_enterHandler( event:TextOperationEvent ):void
			{
				var filterPattern:RegExp = new RegExp( filterInput.text, "i" );
				
				currsourceData.filterFunction = function(o:Object):Boolean {
				
					if ( (null != o._id) && ( o._id as String ).search( filterPattern ) != -1 )
					{
						return true;
					}
					else if (  (null != o.jobtitle) && ( o.jobtitle as String ).search( filterPattern ) != -1 )
					{
						return true;
					}
					else if (  (null != o.jobdesc) && ( o.jobdesc as String ).search( filterPattern ) != -1 )
					{
						return true;
					}
					else if (  (null != o.jarURL) && ( o.jarURL as String ).search( filterPattern ) != -1 )
					{
						return true;
					}
					else if (  (null != o.inputCollection) && ( o.inputCollection as String ).search( filterPattern ) != -1 )
					{
						return true;
					}
					else if (  (null != o.errorMessage) && ( o.errorMessage as String ).search( filterPattern ) != -1 )
					{
						return true;
					}
					else if (  (null != o.communityIDs) && ( o.communityIDs as String ).search( filterPattern ) != -1 )
					{
						return true;
					}
					else if (  (null != o.communityNames) && ( o.communityNames as String ).search( filterPattern ) != -1 )
					{
						return true;
					}
					return false;
				}
				currsourceData.refresh();
			}
			
			protected function goodSourceService_faultHandler( event:FaultEvent ):void
			{
				Alert.show( "Error: Could not contact api server to get good sources" );
				
				if ( null != refreshTimer )
				{
					refreshTimer.stop();
				}
			
			}
			
			protected function goodSourceService_resultHandler( event:ResultEvent ):void
			{
				var json:JSONDecoder = new JSONDecoder( event.result as String, true );
				var data:Object = json.getValue();
				var sourceItems:ArrayCollection = new ArrayCollection( data.data );
				
				var goodSources:ArrayCollection = new ArrayCollection();
				
				for each ( var o:Object in sourceItems )
				{
					var communityNames:String = "";
					var communityIDs:String = "";
					for each (var id:String in o.communityIds) {
						if (communityNames.length > 0) {
							communityNames += ", ";
							communityIDs += ", ";
						}
						communityIDs += id;
						communityNames += setCommunityName( id );						
					}
					o.communityNames = communityNames;
					o.communityIDs = communityIDs;
					
					if ( o.jobtitle == null )
						o.jobtitle = "";
					o.jobtitle = StringUtil.trim( o.jobtitle.toString() );
					
					if (o.scheduleFreq == "HOURLY")
						o.jobtitle = "[Hourly] " + o.jobtitle;
					else if (o.scheduleFreq == "DAILY")
						o.jobtitle = "[Daily] " + o.jobtitle;
					else if (o.scheduleFreq == "WEEKLY")
						o.jobtitle = "[Weekly] " + o.jobtitle;
					
					// Status, options:
					// Blue if running at the moment
					// Green if all runs successful
					// Yellow if never run
					// Red if last run was an error (or all runs failed)
					// Orange if any run has failed
					if ( o.jobidS != null ) // In progress, Blue
					{
						o.statusImage = yellowexclamation;
						o.statusColor = 0x0000EE;
					}
					else  if ( o.errorMessage == null || o.timesRan == 0 ) // Never run
					{
						o.statusImage = yellowexclamation;
						o.statusColor = 0xEEEE00;
					}
					else if (( (o.errorMessage as String).substring(0, 5).toLowerCase() == "error" ) || 
						( (o.errorMessage as String).substring(0, 10).toLowerCase() == "job failed" ) ||
						(o.timesRan == o.timesFailed)) // Errors
					{
						o.statusImage = redx;
						o.statusColor = 0xFF0000;
					}
					else if (o.timesFailed > 0)
					{
						o.statusImage = redx;
						o.statusColor = 0xFF7F00;						
					}
					else {
						o.statusImage = greencheck;
						o.statusColor = 0x00FF00;						
					}
										
					if (null != o.lastCompletionTime)
					{
						o.parsedDate = DateConverter.parseDate( o.lastCompletionTime );
						o.parsedDatePlus = o.parsedDate + "\n\n#times run: " + o.timesRan + ", #times failed: " + o.timesFailed;
					}				
					else {
						o.parsedDate = new Date(0);
						o.parsedDatePlus = "Never";
					}
					if (null != o.nextRunTime) {
						var nextDate:String = "(Not scheduled)";
						if (o.nextRunTime < 4070908800000)
							nextDate = new Date(Number(o.nextRunTime)).toString();
						o.parsedDatePlus += "\n\nNext run: " + nextDate;
					}
					
					var truncatedMessageForPerformance:String = o.errorMessage as String;
					
					if ( null == truncatedMessageForPerformance )
					{
						o.errorMessage_trunc = "";
						o.recordCount = "0";
					}
					else {
						var getRecordsRegex:RegExp = new RegExp("Total Records: ([0-9]+)");
						var regexResult:Object = getRecordsRegex.exec(truncatedMessageForPerformance);
						if (null != regexResult) {
							o.recordCount = regexResult[1];
						}
						else {
							o.recordCount = 0;
						}
						
						if ( truncatedMessageForPerformance.length > 64 )
						{
							o.errorMessage_trunc = truncatedMessageForPerformance.substr( 0, 64 ) + "...";
						}
						else
						{
							o.errorMessage_trunc = truncatedMessageForPerformance;
						}
					}
					
					if ((null != o.jobidN) && (null != o.jobidS)) {
						o.jobID = o.jobidS + "_" + o.jobidN;
					}
					else {
						o.jobID = "-";
					}
					
					if (null != o.mapProgress) {
						if (o.mapProgress > 1) 
							o.mapProgress= "-";
						else if (o.mapProgress < 0)
							o.mapProgress = "-";
						else {
							o.mapProgress = "" + int(100.0*o.mapProgress) + "%";
						}
					}
					else {
						o.mapProgress = "-";
					}					
					
					if (null != o.reduceProgress) {
						if (o.reduceProgress > 1) 
							o.reduceProgress= "-";
						else if (o.reduceProgress < 0)
							o.reduceProgress= "-";
						else {
							o.reduceProgress = "" + int(100.0*o.reduceProgress) + "%";
						}
					}
					else {
						o.reduceProgress = "-";
					}
					
					sourceData.addItem( o );
					currsourceData.addItem( o );
				}
				
				
				currsourceData.refresh();
				
				checkFilter();
			}
			
			/**
			 * function to handle when a community is selected
			 *
			 * @param event The CommunityEvent received
			 */
			
			protected function handleSelectCommunityEvent( event:CommunityEvent ):void
			{
				sourceData.removeAll();
				currsourceData.removeAll();
				
				if ( event.selectedCommunities != null && event.selectedCommunities.length > 0 )
				{
					selectedCommunities = event.selectedCommunities;
					loadSourceData( event.selectedCommunities );
				}
			}
			
			protected function onRefreshTimerComplete( event:TimerEvent ):void
			{
				refreshButton_clickHandler( null );
			}
			
			
			protected function positionCommunitiesPopup():void
			{
				if ( communitiesPopup )
				{
					var p:Point = buttonsGroup.contentToGlobal( new Point( communitiesGroup.x, communitiesGroup.y ) );
					communitiesPopup.x = p.x - ( communitiesPopup.width / 2 ) + ( communitiesGroup.width / 2 );
					communitiesPopup.y = p.y + communitiesGroup.height + 2;
				}
			}
			
			/**
			 * function to handle refreshing of the data
			 *
			 * @param event The MouseEvent received
			 */
			protected function refreshButton_clickHandler( event:MouseEvent ):void
			{
				refreshButton.selected = false;
				sourceData.removeAll();
				currsourceData.removeAll();
				loadSourceData( selectedCommunities );
			}
			
			protected function statusDG_itemDoubleClickHandler( event:MouseEvent ):void
			{
				if ( event.target is Label && ( event.target.owner is GridTextItemRenderer || event.target.owner.owner.owner.owner is errorLabelItemRenderer ) )
				{
					var columnInfo:GridTextItemRenderer = event.target.owner as GridTextItemRenderer;
					var col:GridColumn;
					
					if ( columnInfo != null )
						col = statusDG.columns.getItemAt( columnInfo.columnIndex ) as GridColumn;
					else
					{
						var colInfo:errorLabelItemRenderer = event.target.owner.owner.owner.owner as errorLabelItemRenderer;
						col = statusDG.columns.getItemAt( colInfo.columnIndex ) as GridColumn;
					}
					var colname:Array = col.dataField.split( "." );
					var obj:Object = statusDG.selectedItem;
					
					if ( col.headerText == "Status Message" )
						obj = columnInfo.columnData.errorMessage;
					else
						for each ( var s:String in colname )
						{
							obj = obj[ s ];
						}
					var selectedData:String = " ";
					
					if ( obj != null )
						selectedData = obj.toString();
					System.setClipboard( selectedData );
					debugLabel.text = "Data cell copied to clipboard.";
					debugFadeOut.stop();
					debugFadeIn.stop();
					debugLabel.visible = true;
					timer.start();
				}
			}
			
			
			protected function statusDG_rollOverHandler( event:ListEvent ):void
			{
				statusDG.setStyle( "rollOverColor", event.itemRenderer.data.statusColor );
				statusDG.validateNow();
			}
			
			protected function timer_event( event:TimerEvent ):void
			{
				timer.stop();
				debugLabel.visible = false;
			}
			
			
			protected function vgroup1_creationCompleteHandler( event:FlexEvent ):void
			{
				timer.addEventListener( TimerEvent.TIMER, timer_event );
				statusDG.addEventListener( ListEvent.ITEM_ROLL_OVER, statusDG_rollOverHandler );
			}
			
			/**
			 * function to check if a filter has been
			 * previously applied
			 */
			private function checkFilter():void
			{
				if ( filterInput.text.length > 0 )
					filter_enterHandler( null );
			}
			
			private function dateCompareFunction( objA:Object, objB:Object, column:GridColumn /*fields:Array = null*/ ):int
			{
				var result:int = -1;//ObjectUtil.dateCompare(objA.harvestDate, objB.harvestDate);
				
				//if you want null to show up as the largest date, comment out the next 2 lines
				if ( objA.parsedDate == null && objB.parsedDate == null )
					result = 0;
				else if ( objA.parsedDate == null )
					result = -1;
				else if ( objB.parsedDate == null )
					result = 1;
				else
					result = ObjectUtil.dateCompare( objA.parsedDate, objB.parsedDate );
				
				return result;
			}
			
			private function numericCompareFunction( objA:Object, objB:Object, column:GridColumn ):int
			{
				var result:int = -1;
				
				if ( objA[column.dataField] == null)
					result = -1;
				if ( objB[column.dataField] == null)
					result = 1;
				else
					result = ObjectUtil.numericCompare( objA[column.dataField], objB[column.dataField] );
				
				return result;
			}
			
			private function handleCommunityJoinedEvent( event:CommunityEvent ):void
			{
				dispatchEvent( event );
			}
			
			private function setCommunityName( commid:String ):String
			{
				for each ( var o:Object in communityData )
				{
					if ( o._id == commid )
						return o.name;
				}
				return "Error: Couldn't find matching community.";
			}
			
			private function messageCompareFunction( objA:Object, objB:Object, column:GridColumn /*fields:Array = null*/ ):int
			{
				var result:int = -1;
				
				if ( objA.errorMessage == null )
					result = -1;
				else if ( objB.errorMessage == null )
					result = 1;
				else
					result = ObjectUtil.stringCompare( objA.errorMessage, objB.errorMessage, true );
				
				return result;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="goodSourceService"
			fault="goodSourceService_faultHandler(event)"
			result="goodSourceService_resultHandler(event)" />
		<s:Fade id="debugFadeOut"
			alphaFrom="1"
			alphaTo="0"
			duration="3000" />
		<s:Fade id="debugFadeIn"
			alphaFrom="0"
			alphaTo="1"
			duration="1000" />
	</fx:Declarations>

	<s:HGroup id="buttonsGroup"
		paddingLeft="5"
		verticalAlign="middle">
		<views:InfLabel id="title"
			text="Search: "
			styleName="lightGrey"
			left="0"
			verticalCenter="2" />
		<views:FilterTextInput id="filterInput"
			styleName="filterTextInput"
			width="220"
			text="{ searchTerm }"
			change="filter_enterHandler(event)"
			clear="filterTextInput_clearHandler()"
			focusIn="filterTextInput_focusInHandler()"
			prompt="Filter Sources"
			resultsFound="{ currsourceData.length != 0 }"
			showFilterButton="false" />
		<s:Spacer width="20" />
		<s:HGroup id="communitiesGroup">
			<views:InfToggleButton id="communitiesButton"
				label="Community"
				styleName="communityButton"
				click="communitiesButton_clickHandler(event)" />
			<views:InfToggleButton id="refreshButton"
				label="Refresh"
				styleName="refreshButton"
				width="60"
				click="refreshButton_clickHandler(event)" />
		</s:HGroup>
		<s:Spacer width="30" />
		<views:InfLabel id="theMoreYouKnow"
			text="(Double click on cell to copy to clipboard)"
			styleName="lightGrey"
			left="0"
			verticalCenter="2" />
		<s:Spacer width="15" />
		<views:InfLabel id="debugLabel"
			width="100%"
			styleName="lightGrey"
			left="0"
			verticalCenter="2"
			hideEffect="{ debugFadeOut }"
			showEffect="{ debugFadeIn }"
			visible="false" />
	</s:HGroup>

	<!--itemDoubleClick="statusDG_itemDoubleClickHandler(event)"-->
	<s:BorderContainer 
		width="100%"
		height="100%"
		borderColor="0x000000">
		<views:InfSelectableDataGrid id="statusDG"
			width="100%"
			height="100%"
			horizontalScrollPolicy="off"
			dataProvider="{ currsourceData }"
			doubleClickEnabled="true"
			doubleClick="statusDG_itemDoubleClickHandler(event)">
			<views:columns>
				<s:ArrayList>
					<s:GridColumn 
						width="70"
						dataField="statusColor"
						headerRenderer="renderers.GridTextHeaderRenderer"
						headerText="Status"
						itemRenderer="renderers.StatusColorDGItemRenderer"
						resizable="false" />
					<s:GridColumn 
						width="200"
						dataField="jobtitle"
						headerRenderer="renderers.GridTextHeaderRenderer"
						headerText="Title"
						itemRenderer="renderers.GridTextItemRenderer" />
					<s:GridColumn 
						width="100"
						dataField="_id"
						headerRenderer="renderers.GridTextHeaderRenderer"
						headerText="ID"
						itemRenderer="renderers.GridTextItemRenderer" />
					<s:GridColumn 
						width="155"
						dataField="inputCollection"
						headerRenderer="renderers.GridTextHeaderRenderer"
						headerText="Input"
						itemRenderer="renderers.GridTextItemRenderer" />
					<s:GridColumn 
						width="155"
						dataField="communityNames"
						headerRenderer="renderers.GridTextHeaderRenderer"
						headerText="Communities"
						itemRenderer="renderers.GridTextItemRenderer" />
					<s:GridColumn 
						width="100"
						dataField="communityIDs"
						headerRenderer="renderers.GridTextHeaderRenderer"
						headerText="Community IDs"
						itemRenderer="renderers.GridTextItemRenderer" />
					<s:GridColumn 
						width="100"
						dataField="jobID"
						headerRenderer="renderers.GridTextHeaderRenderer"
						headerText="Job ID"
						itemRenderer="renderers.GridTextItemRenderer" />
					<s:GridColumn 
						width="75"
						dataField="mapProgress"
						headerRenderer="renderers.GridTextHeaderRenderer"
						headerText="Map %"
						itemRenderer="renderers.GridTextItemRenderer"
						sortCompareFunction="numericCompareFunction" />
					<s:GridColumn 
						width="75"
						dataField="reduceProgress"
						headerRenderer="renderers.GridTextHeaderRenderer"
						headerText="Reduce %"
						itemRenderer="renderers.GridTextItemRenderer"
						sortCompareFunction="numericCompareFunction" />
					<s:GridColumn 
						width="90"
						dataField="recordCount"
						headerRenderer="renderers.GridTextHeaderRenderer"
						headerText="# Records"
						itemRenderer="renderers.GridTextItemRenderer"
						sortCompareFunction="numericCompareFunction" />
					<s:GridColumn 
						width="155"
						dataField="parsedDatePlus"
						headerRenderer="renderers.GridTextHeaderRenderer"
						headerText="Last Completed+"
						itemRenderer="renderers.GridTextItemRenderer"
						sortCompareFunction="dateCompareFunction" />
					<s:GridColumn 
						dataField="errorMessage_trunc"
						editable="true"
						headerRenderer="renderers.GridTextHeaderRenderer"
						headerText="Status Message"
						itemRenderer="renderers.GridTextItemRenderer"
						sortCompareFunction="messageCompareFunction" />
				</s:ArrayList>
			</views:columns>
		</views:InfSelectableDataGrid>
	</s:BorderContainer>
</s:VGroup>
