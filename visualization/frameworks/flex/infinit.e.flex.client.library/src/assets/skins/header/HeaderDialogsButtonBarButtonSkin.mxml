<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2012, The Infinit.e Open Source Project.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License, version 3,
   as published by the Free Software Foundation.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU Affero General Public License for more details.
   
   You should have received a copy of the GNU Affero General Public License
   along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:common="com.ikanow.infinit.e.shared.view.component.common.*"
	xmlns:component="com.ikanow.infinit.e.shared.view.component.*"
	minWidth="21"
	minHeight="21"
	alpha.disabledStates="0.5"
	iconGroupPaddingTop="-3">

	<fx:Metadata>[HostComponent("spark.components.ButtonBarButton")]</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import com.ikanow.infinit.e.shared.model.vo.ui.INavigationItem;
			import spark.components.ButtonBarButton;
			
			private static const exclusions:Array = [ "labelDisplay" ];
			
			override protected function updateDisplayList( unscaledWidth:Number, unscaledHeight:Number ):void
			{
				super.updateDisplayList( unscaledWidth, unscaledHeight );
				
				var buttonBarButton:ButtonBarButton = ButtonBarButton( hostComponent );
				var navigationItem:INavigationItem = INavigationItem( buttonBarButton.data );
				
				// shoe left separator only for first button
				leftSeparator.visible = leftSeparator.includeInLayout = buttonBarButton.itemIndex == 0 ? true : false;
				
				// change the icon based on the current state
				switch ( currentState )
				{
					case "up":
					{
						iconDisplay.source = navigationItem.icon;
						break;
					}
					case "over":
					{
						iconDisplay.source = navigationItem.altIcon;
						break;
					}
					case "down":
					{
						iconDisplay.source = navigationItem.icon;
						break;
					}
					case "disabled":
					{
						iconDisplay.source = navigationItem.icon;
						break;
					}
					case "upAndSelected":
					{
						iconDisplay.source = navigationItem.altIcon;
						break;
					}
					case "overAndSelected":
					{
						iconDisplay.source = navigationItem.altIcon;
						break;
					}
					case "downAndSelected":
					{
						iconDisplay.source = navigationItem.icon;
						break;
					}
					case "disabledAndSelected":
					{
						iconDisplay.source = navigationItem.altIcon;
						break;
					}
				}
			}
		]]>
	</fx:Script>

	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over"
			stateGroups="overStates" />
		<s:State name="down"
			stateGroups="downStates" />
		<s:State name="disabled"
			stateGroups="disabledStates" />
		<s:State name="upAndSelected"
			stateGroups="selectedStates, selectedUpStates" />
		<s:State name="overAndSelected"
			stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected"
			stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected"
			stateGroups="selectedUpStates, disabledStates, selectedStates" />
	</s:states>

	<!-- background -->
	<s:Rect 
		width="100%"
		height="100%"
		bottom="2"
		right="3">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:entries>
					<s:GradientEntry 
						color="0x363E41"
						ratio=".3" />
					<s:GradientEntry 
						color.down="0x373d44"
						color.downAndSelected="0x373d44"
						color.over="0x585d61"
						color.overAndSelected="0x585d61"
						color.up="0x373d44"
						color.upAndSelected="0x585d61"
						alpha.down=".7" />
				</s:entries>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<!-- left separator -->
	<component:VSeparator id="leftSeparator"
		bottom="2"
		left="0" />

	<!-- right separator -->
	<component:VSeparator 
		bottom="2"
		right="0" />

	<!-- text -->
	<common:InfLabel id="labelDisplay"
		styleName.up="lightGrey"
		styleName.down="lightGrey"
		styleName.over="veryLightGrey"
		styleName.upAndSelected="veryLightGrey"
		styleName.overAndSelected="veryLightGrey"
		styleName.downAndSelected="lightGrey"
		width="74"
		bottom="2"
		horizontalCenter="0"
		paddingLeft="4"
		paddingRight="6"
		top="2"
		verticalAlign="middle"
		verticalCenter="1" />

</s:SparkButtonSkin>
