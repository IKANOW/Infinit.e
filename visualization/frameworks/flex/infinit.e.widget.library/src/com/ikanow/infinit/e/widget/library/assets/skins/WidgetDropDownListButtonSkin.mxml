<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2012, The Infinit.e Open Source Project.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License, version 3,
   as published by the Free Software Foundation.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU Affero General Public License for more details.
   
   You should have received a copy of the GNU Affero General Public License
   along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:components="com.ikanow.infinit.e.widget.library.components.*"
	xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	minWidth="21"
	minHeight="21">

	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.Button")]
		]]>
	</fx:Metadata>

	<fx:Script fb:purpose="styling">
		/* Define the skin elements that should not be colorized.
		For dropDownList buttons, the graphics are colorized but the arrow is not. */
		private static const exclusions:Array = [ "arrow" ];
		
		/**
		 * @private
		 */
		override public function get colorizeExclusions():Array
		{
			return exclusions;
		}
		
		
		private var cornerRadius:Number = 6;
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		
		/**
		 *  @private
		 */
		override protected function updateDisplayList( unscaledWidth:Number, unscaledHeight:Number ):void
		{
			var cr:Number = getStyle( "cornerRadius" );
			
			if ( cornerRadius != cr )
			{
				cornerRadius = cr;
			}
			
			super.updateDisplayList( unscaledWidth, unscaledHeight );
		};
	</fx:Script>

	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" />
		<s:State name="down" />
		<s:State name="disabled" />
	</s:states>

	<!-- background -->
	<s:Rect 
		width="100%"
		height="100%"
		left="1"
		right="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:entries>
					<s:GradientEntry 
						color.down="0x969696"
						color.over="0x969696"
						color.up="0xE8E9E9" />
					<s:GradientEntry 
						color.down="0xF4F4F4"
						color.over="0xF4F4F4"
						color.up="0xE8E9E9" />
				</s:entries>
			</s:LinearGradient>
		</s:fill>
		<s:filters>
			<s:DropShadowFilter 
				color="0xFFFFFF"
				alpha=".5"
				angle="90"
				blurX="0"
				blurY="0"
				distance="2"
				includeIn="up"
				inner="true" />
		</s:filters>
	</s:Rect>

	<!-- left seperator -->
	<components:WidgetVSeparator 
		shadowColor="0xFFFFFF"
		lineColor="0xBBBBBB"
		strokeWeight="1" />

	<!-- right seperator -->
	<components:WidgetVSeparator 
		right="1"
		shadowColor="0xFFFFFF"
		lineColor="0xBBBBBB"
		strokeWeight="1" />

	<!-- arrow -->
	<s:VGroup id="arrowGroup"
		width="12"
		right="10"
		top="16">
		<s:Path id="arrow"
			height="7"
			width="10"
			data="M 8.75 15.10 L 0.05 0.03 17.45 0.03 Z "
			left="4">
			<s:fill>
				<s:SolidColor 
					color.down="0x131313"
					color.over="0x333333"
					color.up="0x777777" />
			</s:fill>
		</s:Path>
	</s:VGroup>

</s:SparkSkin>
