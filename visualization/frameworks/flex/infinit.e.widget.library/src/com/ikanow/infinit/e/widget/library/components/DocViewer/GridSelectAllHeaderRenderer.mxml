<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2012, The Infinit.e Open Source Project.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License, version 3,
   as published by the Free Software Foundation.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU Affero General Public License for more details.
   
   You should have received a copy of the GNU Affero General Public License
   along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<s:DefaultGridHeaderRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	styleName="dataGridHeader">

	<fx:Metadata>
		[Event(name="selectAll", type="flash.events.Event")]
		[Event(name="selectNone", type="flash.events.Event")]
		[Event(name="selectInverse", type="flash.events.Event")]
		[Event(name="filterThis", type="flash.events.Event")]
		[Event(name="filterSelected", type="flash.events.Event")]
		[Event(name="filterSome", type="flash.events.Event")]
		[Event(name="filterAll", type="flash.events.Event")]
		[Event(name="clickHeader", type="flash.events.Event")]
		[Event(name="googleSelected", type="flash.events.Event")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			
			import spark.events.DropDownEvent;
			
			[Bindable]
			private var options:ArrayList;
			
			protected function selectAll():void
			{
				dispatchEvent( new Event( "selectAll", true ) );
			}
			
			protected function selectNone():void
			{
				dispatchEvent( new Event( "selectNone", true ) );
			}
			
			protected function selectInverse():void
			{
				dispatchEvent( new Event( "selectInverse", true ) );
			}
			
			protected function filterThis():void
			{
				dispatchEvent( new Event( "filterThis", true ) );
			}
			
			protected function filterSelected():void
			{
				dispatchEvent( new Event( "filterSelected", true ) );
			}
			
			protected function filterSome():void
			{
				dispatchEvent( new Event( "filterSome", true ) );
			}
			
			protected function filterAll():void
			{
				dispatchEvent( new Event( "filterAll", true ) );
			}
			
			protected function googleSelected():void
			{
				dispatchEvent( new Event( "googleSelected", true ) );
			}
			
			protected function selectOptions_changeHandler():void
			{
				if ( selectOptions.selectedIndex != -1 )
				{
					if ( selectOptions.selectedIndex == 0 )
						selectAll();
					else if (  selectOptions.selectedIndex == 2 )
						selectInverse();
					else if ( selectOptions.selectedIndex == 3 )
						filterThis();
					else if ( selectOptions.selectedIndex == 4 )
						filterSelected();
					else if ( selectOptions.selectedIndex == 5 )
						filterSome();
					else if ( selectOptions.selectedIndex == 6 )
						filterAll();
					else if ( selectOptions.selectedIndex == 7 )
						googleSelected();
					else
						selectNone();
				}
				
				selectOptions.selectedIndex = -1;
			}
			
			protected function selectOptions_creationCompleteHandler():void
			{
				options = new ArrayList();
				options.addItem( "Select All" );
				options.addItem( "Select None" );
				options.addItem( "Select Inverse" );
				options.addItem( "Filter This Document" );
				options.addItem( "Filter Selected Items" );//TODO add events for these, also fix loading data on new query
				options.addItem( "Filter Docs with Any Selected Items" );
				options.addItem( "Filter Docs with All Selected Items" );
				options.addItem( "Google Selected Items" );
				this.selectOptions.selectedIndex = -1;
			}
			
			protected function selectOptions_openHandler( event:DropDownEvent ):void
			{
				if ( selectOptions.dropDown )
				{
					selectOptions.dropDown.removeEventListener( MouseEvent.MOUSE_OVER, selectOptionsDropDown_onMouseOver );
					selectOptions.dropDown.removeEventListener( MouseEvent.MOUSE_OUT, selectOptionsDropDown_onMouseOut );
					
					selectOptions.dropDown.addEventListener( MouseEvent.MOUSE_OVER, selectOptionsDropDown_onMouseOver, false, 0, true );
					selectOptions.dropDown.addEventListener( MouseEvent.MOUSE_OUT, selectOptionsDropDown_onMouseOut, false, 0, true );
				}
			}
			
			
			
			private function selectOptionsDropDown_onMouseOut( event:MouseEvent ):void
			{
				selectOptions.closeDropDown( false );
			}
			
			private function selectOptionsDropDown_onMouseOver( event:MouseEvent ):void
			{
				selectOptions.openDropDown();
			}

			protected function selectOptions_clickHandler(event:MouseEvent):void
			{
				dispatchEvent( new Event( "clickHeader", true ) );
			}

		]]>
	</fx:Script>

	<s:DropDownList id="selectOptions"
		width="100%"
		height="100%"
		dataProvider="{ options }"
		styleName="selectAllDropDownList"
		change="selectOptions_changeHandler()"
		creationComplete="selectOptions_creationCompleteHandler()"
		rollOver="selectOptions.openDropDown()"
		rollOut="selectOptions.closeDropDown( false )"		
		open="selectOptions_openHandler(event)" 
		click="selectOptions_clickHandler(event)" />

</s:DefaultGridHeaderRenderer>
