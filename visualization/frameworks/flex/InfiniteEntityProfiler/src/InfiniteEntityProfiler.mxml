<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2012, The Infinit.e Open Source Project.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License, version 3,
   as published by the Free Software Foundation.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU Affero General Public License for more details.
   
   You should have received a copy of the GNU Affero General Public License
   along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:containers="flexlib.mdi.containers.*"
	xmlns:local="*"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	creationComplete="application1_creationCompleteHandler(event)">
	<fx:Style source="/com/ikanow/infinit/e/assets/styles/infiniteStyles.css" />
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace local "*";
		@namespace containers "flexlib.mdi.containers.*";
		
		mx|AccordionHeader
		{
			textFieldClass: ClassReference("mx.core.UIFTETextField");
		}
		s|Application
		{
			backgroundColor: #FFFFFF;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.ikanow.infinit.e.widget.library.data.ResultSet;
			import com.ikanow.infinit.e.widget.library.data.WidgetContext;
			import com.ikanow.infinit.e.widget.library.frameworkold.ModuleInterface;
			import com.ikanow.infinit.e.widget.library.frameworkold.QueryResults;
			import com.ikanow.infinit.e.widget.library.utility.Authentication;
			import com.ikanow.infinit.e.widget.library.utility.JSONDecoder;
			import com.ikanow.infinit.e.widget.library.utility.JSONEncoder;
			import com.ikanow.infinit.e.widget.library.utility.URLEncoder;
			import com.ikanow.infinit.e.widget.library.widget.IResultSet;
			import com.ikanow.infinit.e.widget.library.widget.IWidget;
			import flash.net.navigateToURL;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.LinkBar;
			import mx.controls.LinkButton;
			import mx.controls.Text;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.modules.ModuleLoader;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import spark.components.NavigatorContent;
			import system.Arrays;
			import system.data.maps.HashMap;
			
			private var debugging:Boolean = true; //set to true when debugging the html page.
			
			private var DEBUG_SEARCH_TERM = "washington,united states/city"; //must have value is debugging is set to true
			
			
			//private var API_SERVER:String = "http://infinite.ikanow.com/api/"; 	//api url address of infinite api server
			private var API_SERVER:String = ExternalInterface.call( "getEndPointUrl" );
			
			private var COMMUNITYID:String = ""; //community id to search on, gets populated during load
			
			private var context:WidgetContext = new WidgetContext();    		//new module data holder
			
			private var queryResults:QueryResults = new QueryResults(); 		//old module data holder
			
			private var searchTerm:String = null;
			
			private var searchType:String = null;
			
			private var entitySearch:Boolean = false;
			
			private var CURRENT_URL = "";
			
			/**
			 * On init of application, send modules the shared iwidgetcontext object.
			 */
			protected function application1_creationCompleteHandler( event:FlexEvent ):void
			{
				if ( parameters.entity == "" )
					parameters.entity = null;
				
				if ( parameters.communities == "" )
					parameters.communities = null;
				
				cursorManager.setBusyCursor();
				
				//var hashpassword:String = Authentication.hashPassword("james");
				//infiniteLoginService.url = API_SERVER + "auth/login/" + URLEncoder.encode("james@ikanow.com") + "/" + URLEncoder.encode(hashpassword);
				//infiniteLoginService.send();
				
				
				CURRENT_URL = ExternalInterface.call( "window.location.href.toString" ).split( "?" )[ 0 ];
				infiniteCommunityService.url = API_SERVER + "social/person/get/"
				infiniteCommunityService.send();
			
			
			
			}
			
			/**
			 * Alias failed function (perhaps cookie timed out)
			 */
			protected function infiniteAliasServiceFault( event:FaultEvent ):void
			{
				cursorManager.removeAllCursors();
				Alert.show( "Error retrieving aliases\n" + event.fault.message );
			}
			
			/**
			 * Login result event, checks if login was successful and sends out
			 * a request for the logged in users groupid.
			 */
			protected function infiniteAliasServiceResult( event:ResultEvent ):void
			{
				var data:Object = JSONDecoder.decode( event.result as String );
				
				if ( data.response.success.toString() == "true" )
				{
					//var aList:ArrayCollection = new ArrayCollection();
					var comma:String = "(";
					
					for each ( var alias:String in data.data )
					{
						comma += alias + ",";
							//aList.addItem(alias);	
					}
					//aliasList.dataProvider = aList;
					comma = comma.substr( 0, comma.length - 1 );
					comma += ")";
					
					if ( comma.length > 100 )
					{
						aliases.text = comma.substr( 0, 100 ) + "...";
					}
					else
					{
						aliases.text = comma;
					}
					aliases.toolTip = comma;
					aliases.setStyle( "color", "Gray" );
				}
				else
				{
					cursorManager.removeAllCursors();
					Alert.show( "Error retrieving Aliases.\n " + ( data.response.message as String ) );
				}
			}
			
			/**
			 * Fault event for community API call
			 */
			protected function infiniteCommunityServiceFault( event:FaultEvent ):void
			{
				cursorManager.removeAllCursors();
				Alert.show( "Error logging in, during group api call\n" + event.fault.message );
			}
			
			/**
			 * Result event for communityid API call, checks if it was successful then finds the
			 * default group and sets our COMMUNITYID to that.
			 */
			protected function infiniteCommunityServiceResult( event:ResultEvent ):void
			{
				//build out the community id
				var data:Object = JSONDecoder.decode( event.result as String );
				
				if ( data.response.success == true )
				{
					var groups:ArrayCollection = new ArrayCollection( data.data.communities );
					
					for each ( var group:Object in groups )
					{
						if ( COMMUNITYID.length > 0 )
							COMMUNITYID += ",";
						COMMUNITYID += group._id;
					}
					
					if ( parameters.communities != null )
					{
						var communitiesArray:Array = COMMUNITYID.split( "," );
						COMMUNITYID = "";
						var communities:String = parameters.communities;
						var commIds:Array = communities.split( "," );
						
						for each ( var c_id:String in commIds )
						{
							if ( communityIdAccepted( c_id, communitiesArray ) )
							{
								if ( COMMUNITYID.length > 0 )
									COMMUNITYID += ",";
								COMMUNITYID += c_id;
							}
						}
						
					}
					
					if ( COMMUNITYID == "" )
					{
						cursorManager.removeAllCursors();
						Alert.show( "No Valid Communities Specified" );
						COMMUNITYID == "000";
					}
					
					perform_queries();
					
					
				}
				else
				{
					cursorManager.removeAllCursors();
					Alert.show( "Error logging in, couldn't get a users communities" );
				}
			}
			
			/**
			 * Error sending login request, usually from a bad URL. (Wrong API server)
			 */
			protected function infiniteLoginServiceFault( event:FaultEvent ):void
			{
				cursorManager.removeAllCursors();
				Alert.show( "Error logging in\n" + event.fault.message );
			}
			
			
			/**
			 * Login result event, checks if login was successful and sends out
			 * a request for the logged in users groupid.
			 */
			protected function infiniteLoginServiceResult( event:ResultEvent ):void
			{
				var data:Object = JSONDecoder.decode( event.result as String );
				
				if ( data.response.success.toString() == "true" )
				{
					//login successful, get group
					infiniteCommunityService.url = API_SERVER + "social/person/get/";
					infiniteCommunityService.send();
				}
				else
				{
					cursorManager.removeAllCursors();
					Alert.show( "Error logging in." );
				}
			}
			
			/**
			 * Query failed function (perhaps cookie timed out)
			 */
			protected function infiniteQueryServiceFault( event:FaultEvent ):void
			{
				cursorManager.removeAllCursors();
				Alert.show( "Error sending query\n" + event.fault.message );
			}
			
			
			/**
			 * Result function for query API call.  Gets results from query and
			 * creates a context object out of it.  Sends to modules onReceiveNewQuery()
			 * function to let them know they have new data.
			 */
			protected function infiniteQueryServiceResult( revent:ResultEvent ):void
			{
				title.text = searchTerm;
				
				//receive the query results and send to widget
				var data:Object = JSONDecoder.decode( revent.result as String );
				
				if ( data.response.success == true )
				{
					queryResults = new QueryResults();
					queryResults.populateQueryResults( data, null, context );
					context.onNewQuery( queryResults, data.response.message, null );
					var resultSet:IResultSet = context.getQuery_AllResults();
					
					documentDataExtraction( resultSet );
					eventDataExtraction( resultSet );
					entityDataExtraction( resultSet );
					
					cursorManager.removeAllCursors();
				}
			}
			
			private function communityIdAccepted( c_id:String, communities:Array ):Boolean
			{
				for each ( var allowed:String in communities )
				{
					if ( allowed == c_id )
						return true;
				}
				return false;
			}
			
			private function createQueryInternal( searchTerm:String ):String
			{
				var queryObject:Object = new Object();
				//STEP 1: add advanced options
				var queryOptions_output_documents:Object = new Object();
				queryOptions_output_documents[ "enable" ] = true;
				queryOptions_output_documents[ "eventsTimeline" ] = true;
				queryOptions_output_documents[ "numReturn" ] = 10;
				//queryOptions_output_documents["skip"] = 0;
				queryOptions_output_documents[ "ents" ] = false;
				queryOptions_output_documents[ "geo" ] = false;
				queryOptions_output_documents[ "events" ] = true;
				queryOptions_output_documents[ "facts" ] = true;
				queryOptions_output_documents[ "summaries" ] = true;
				var queryOptions_output:Object = new Object();
				var aggregations:Object = new Object();
				aggregations[ "entsNumReturn" ] = 100;
				aggregations[ "eventsNumReturn" ] = 100;
				aggregations[ "factsNumReturn" ] = 100;
				queryOptions_output[ "aggregation" ] = aggregations;
				
				var score:Object = new Object();
				var timeProx:Object = new Object();
				timeProx[ "time" ] = "now";
				timeProx[ "decay" ] = "1m";
				score[ "timeProx" ] = timeProx;
				
				queryOptions_output[ "docs" ] = queryOptions_output_documents;
				queryOptions_output[ "format" ] = "json";
				
				
				var qt:ArrayCollection = new ArrayCollection();
				var qo:Object = new Object();
				
				if ( entitySearch )
					qo[ "entity" ] = searchTerm + '/' + searchType;
				else
					qo[ "ftext" ] = searchTerm;
				qt.addItem( qo );
				//queryObject["score"] = score;
				queryObject[ "qt" ] = qt.source;
				queryObject[ "qtOptions" ] = null;
				queryObject[ "output" ] = queryOptions_output;
				
				return com.ikanow.infinit.e.widget.library.utility.JSONEncoder.encode( queryObject );
			}
			
			private function documentDataExtraction( resultSet:IResultSet ):void
			{
				//get documents
				var queryResultsArray:ArrayCollection = resultSet.getTopDocuments();
				//set the labels of these docs and use as dataprovider for list
				var count:int = 0;
				
				for each ( var doc:Object in queryResultsArray )
				{
					//doc.label = doc.title;
					
					//New
					var docNav:NavigatorContent = new NavigatorContent();
					docNav.label = doc.title;
					docNav.toolTip = doc.url;
					docNav.height = 80;
					docNav.width = docAccordion.width - 5;
					
					var vGroup:VBox = new VBox();
					vGroup.height = 79;
					vGroup.horizontalScrollPolicy = "off";
					vGroup.width = docNav.width;
					
					var pubDate:Label = new Label();
					
					if ( doc.publishedDate != null )
						pubDate.text = doc.publishedDate;
					pubDate.width = docNav.width - 12;
					
					
					var link:LinkButton = new LinkButton();
					link.label = doc.url;
					link.id = doc.url;
					link.toolTip = "Click to Navigate";
					link.setStyle( "textDecoration", "underline" );
					link.setStyle( "color", "blue" );
					link.buttonMode = true;
					link.addEventListener( MouseEvent.CLICK, gotoLinkButtonURL );
					
					
					
					var description:Label = new Label();
					description.text = doc.description;
					description.width = docNav.width - 12;
					
					vGroup.addElement( pubDate );
					vGroup.addElement( link );
					vGroup.addElement( description );
					
					
					//var content:Label = new Label();
					//content.text = "URL:"+doc.url;
					docNav.addElement( vGroup );
					
					//docNav.addElement(content);
					docAccordion.addElement( docNav );
					count++;
				}
				//titlesList.dataProvider = queryResultsArray;
			}
			
			private function entityDataExtraction( resultSet:IResultSet ):void
			{
				var searchedEntity:Object = null;
				
				var entitiesArray:ArrayCollection = resultSet.getEntities();
				var whoArray:ArrayCollection = new ArrayCollection();
				var whatArray:ArrayCollection = new ArrayCollection();
				var whereArray:ArrayCollection = new ArrayCollection();
				
				for each ( var entity:Object in entitiesArray )
				{
					var dimension:String = ( entity.dimension as String ).toLowerCase();
					var entSig:String = Number( entity.significance.toString() ).toFixed( 2 );
					
					var eLB:LinkButton = new LinkButton();
					
					
					eLB.label = entity.actual_name + ' (' + entSig + '%)';
					//id is set to act as a url field
					eLB.id = CURRENT_URL + "?entity=" + entity.index + "&communities=" + COMMUNITYID;
					eLB.toolTip = "Double Click to view Entity Profile for " + entity.actual_name;
					eLB.doubleClickEnabled = true;
					eLB.addEventListener( MouseEvent.DOUBLE_CLICK, gotoLinkButtonURL );
					
					if ( dimension == "who" && whoBox.numElements < 10 )
						whoBox.addElement( eLB );
					else if ( dimension == "where" && whereBox.numElements < 10 )
						whereBox.addElement( eLB )
					else if ( dimension == "what" && whatBox.numElements < 10 )
						whatBox.addElement( eLB );
					
					if ( whoBox.numElements == 10 && whereBox.numElements == 10 && whatBox.numElements == 10 && searchedEntity != null )
						break;
					
					if ( searchType != null )
					{
						var entMatch:String = searchTerm + "/" + searchType;
						
						if ( ( entity.index as String ).toLowerCase() == entMatch.toLowerCase() )
						{
							title.toolTip = "";
							
							if ( entity.positiveSentiment != null )
							{
								var psent:String = Number( entity.positiveSentiment ).toFixed( 2 );
								title.text += " +" + psent;
								title.toolTip += "Positive Sentiment: " + psent + "\n";
							}
							
							if ( entity.negativeSentiment != null )
							{
								var nsent:String = Number( entity.negativeSentiment ).toFixed( 2 );
								title.text += " " + nsent;
								title.toolTip += "Negative Sentiment: " + nsent + "\n";
							}
						}
					}
					else
					{
						entMatch = searchTerm;
						
						if ( ( entity.actual_name as String ).toLowerCase() == searchTerm.toLowerCase() )
						{
							searchedEntity = entity;
							
							if ( searchedEntity.positiveSentiment != null )
							{
								title.text += " +" + int( searchedEntity.positiveSentiment ).toString();
							}
							
							if ( searchedEntity.negativeSentiment != null )
							{
								title.text += " " + int( searchedEntity.negativeSentiment ).toString();
							}
						}
					}
				}
			}
			
			private function eventDataExtraction( resultSet:IResultSet ):void
			{
				var eventsArray:Array = resultSet.getEventsTimeline().toArray().sortOn( "time_start", Array.DESCENDING );
				var entityEvents:ArrayCollection = new ArrayCollection();
				var entitySummariesFacts:ArrayCollection = new ArrayCollection();
				
				for each ( var event:Object in eventsArray )
				{
					if ( event.entity1_index != null || event.entity2_index != null )
					{
						var entMatch:String = "";
						
						if ( searchType != null )
							entMatch = searchTerm + "/" + searchType;
						else
							entMatch = searchTerm;
						
						if ( event.entity1_index != null )
						{
							if ( event.entity1_index.toString() == entMatch && event.verb_category != null && event.entity2_index != null )
							{
								var printableEnt:String = ( event.entity2_index as String ).split( "/" )[ 0 ];
								var printableVerb:String = ( event.verb_category as String ).split( "/" )[ 0 ];
								
								event.url = CURRENT_URL + "?entity=" + event.entity2_index + "&communities=" + COMMUNITYID;
								
								switch ( event.assoc_type )
								{
									case "Fact":
									case "Summary":
										event.label = event.time_start + " - " + event.assoc_type + " - " + printableVerb + ": " + printableEnt;
										entitySummariesFacts.addItem( event );
										break;
									case "Event":
										event.label = event.time_start + " - " + printableVerb + ": " + printableEnt;
										entityEvents.addItem( event );
										break;
								}
							}
						}
						
						if ( event.entity2_index != null )
						{
							if ( event.entity2_index.toString() == entMatch && event.verb_category != null && event.entity1_index != null )
							{
								
								var printableEnt:String = ( event.entity1_index as String ).split( "/" )[ 0 ];
								var printableVerb:String = ( event.verb_category as String ).split( "/" )[ 0 ];
								event.label = printableVerb + ": " + printableEnt;
								event.url = CURRENT_URL + "?entity=" + event.entity1_index + "&communities=" + COMMUNITYID;
								
								switch ( event.assoc_type )
								{
									case "Fact":
									case "Summary":
										event.label = event.time_start + " - " + event.assoc_type + " - " + printableVerb + ": " + printableEnt;
										entitySummariesFacts.addItem( event );
										break;
									case "Event":
										event.label = event.time_start + " - " + printableVerb + ": " + printableEnt;
										entityEvents.addItem( event );
										break;
								}
							}
						}
						
					}
				}
				
				
				activitiesList.dataProvider = entityEvents;
				relationshipsList.dataProvider = entitySummariesFacts;
			
			}
			
			//assumes the title is the link
			private function gotoLinkButtonURL( e:MouseEvent ):void
			{
				var currentTarget:LinkButton = e.currentTarget as LinkButton;
				//var currentTarget:Object = e.currentTarget as Object;
				navigateToURL( new URLRequest( currentTarget.id ) );
			}
			
			private function perform_queries():void
			{
				
				
				
				if ( debugging == true && parameters.entity == null )
				{
					searchTerm = DEBUG_SEARCH_TERM;
				}
				else if ( parameters.entity != null )
				{
					searchTerm = parameters.entity;
				}
				else
				{
					cursorManager.removeAllCursors();
					Alert.show( "Search Term not provided" );
					return;
				}
				
				var trySplit:Array = searchTerm.split( "/" );
				
				if ( trySplit.length == 2 )
				{
					searchTerm = trySplit[ 0 ];
					searchType = trySplit[ 1 ];
					entitySearch = true;
				}
				
				sendQuery( infiniteQueryService, searchTerm );
				
				var forSearch:String = searchTerm;
				
				if ( entitySearch && searchType != null )
					forSearch += "%2F" + searchType;
				infiniteAliasService.url = API_SERVER + "knowledge/feature/aliasSuggest/index/" + forSearch + "/" + COMMUNITYID;
				infiniteAliasService.send();
			}
			
			private function sendQuery( service:HTTPService, searchTerm:String ):void
			{
				//header junk
				service.method = "POST";
				var header:Object = new Object();
				header[ "Accept" ] = "application/json";
				service.contentType = "application/json";
				service.headers = header;
				
				service.url = API_SERVER + "knowledge/query/" + COMMUNITYID;
				service.send( createQueryInternal( searchTerm ) );
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="infiniteLoginService"
			fault="infiniteLoginServiceFault(event)"
			result="infiniteLoginServiceResult(event)" />
		<s:HTTPService id="infiniteCommunityService"
			fault="infiniteCommunityServiceFault(event)"
			result="infiniteCommunityServiceResult(event)" />
		<s:HTTPService id="infiniteQueryService"
			fault="infiniteQueryServiceFault(event)"
			result="infiniteQueryServiceResult(event)" />
		<s:HTTPService id="infiniteAliasService"
			fault="infiniteAliasServiceFault(event)"
			result="infiniteAliasServiceResult(event)" />


	</fx:Declarations>
	<s:Group id="widgetCanvas"
		width="100%"
		height="100%"
		bottom="0"
		top="50">
		<s:VGroup>
			<s:HGroup>
				<s:Label id="title"
					fontSize="30"
					textAlign="left" />
				<s:Label id="aliases"
					textAlign="left" />
			</s:HGroup>

			<s:HGroup>
				<s:VGroup>
					<s:Label 
						text="Recommendations"
						fontSize="20" />
					<s:HGroup>
						<s:VGroup>
							<s:Label 
								text="who"
								fontSize="15" />
							<mx:VBox id="whoBox"
								width="200"
								height="270"
								borderStyle="solid" />
						</s:VGroup>
						<s:VGroup>
							<s:Label 
								text="what"
								fontSize="15" />
							<mx:VBox id="whatBox"
								width="200"
								height="270"
								borderStyle="solid" />
						</s:VGroup>
						<s:VGroup>
							<s:Label 
								text="where"
								fontSize="15" />
							<mx:VBox id="whereBox"
								width="200"
								height="270"
								borderStyle="solid" />
						</s:VGroup>
					</s:HGroup>
				</s:VGroup>
				<!--<s:VGroup>
				<s:Label fontSize="20" textAlign="left" text="Facts:"  />
				<s:List id="factsList" width="400" height="250" click="navigateToURL(new URLRequest(factsList.selectedItem.url))" />
				</s:VGroup>-->
				<s:VGroup>
					<s:Label 
						text="Activities:"
						fontSize="20"
						textAlign="left" />
					<s:List id="activitiesList"
						width="400"
						height="250"
						click="navigateToURL(new URLRequest(activitiesList.selectedItem.url))" />
				</s:VGroup>
			</s:HGroup>
			<s:HGroup height="300">
				<s:VGroup>
					<s:HGroup>
						<s:VGroup>
							<s:Label id="relationshipsTitle"
								text="Relationships:"
								fontSize="20"
								textAlign="left" />
							<s:List id="relationshipsList"
								width="450"
								height="300"
								click="navigateToURL(new URLRequest(relationshipsList.selectedItem.url))" />
						</s:VGroup>
						<s:VGroup>
							<s:Label 
								text="Documents:"
								fontSize="20"
								textAlign="left" />
							<mx:VBox 
								height="300"
								width="1250">
								<mx:Accordion id="docAccordion"
									width="750"
									color="0x000000"
									resizeToContent="true" />
							</mx:VBox>
						</s:VGroup>
					</s:HGroup>
				</s:VGroup>
				<!--<s:VGroup>
				<s:Label fontSize="20" textAlign="left" text="Aliases:"  />
				<s:List id="aliasList" width="200" height="200" />
				</s:VGroup>-->
			</s:HGroup>
		</s:VGroup>
	</s:Group>
</s:Application>
