<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2012, The Infinit.e Open Source Project.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License, version 3,
   as published by the Free Software Foundation.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<component:GradientContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:busyIndicator="com.ikanow.infinit.e.shared.view.component.busyIndicator.*"
	xmlns:common="com.ikanow.infinit.e.shared.view.component.common.*"
	xmlns:component="com.ikanow.infinit.e.shared.view.component.*"
	styleName="workspacesHeaderBackground"
	addedToStage="addedToStageHandler(event)">

	<fx:Declarations>
		<mx:NumberFormatter id="numberFormatter"
			precision="0"
			useThousandsSeparator="true" />
	</fx:Declarations>

	<!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: -->
	<!-- Script ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: -->

	<fx:Script>
		<![CDATA[
			import com.ikanow.infinit.e.model.presentation.dashboard.workspaces.header.WorkspacesHeaderModel;
			import com.ikanow.infinit.e.shared.model.constant.Constants;
			import com.ikanow.infinit.e.shared.model.vo.Widget;
			import com.ikanow.infinit.e.shared.model.vo.ui.NavigationItem;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import spark.components.RichEditableText;
			
			[Bindable]
			[Inject]
			public var model:WorkspacesHeaderModel;
			
			protected function addedToStageHandler( event:Event ):void
			{
				selectedWidgetsList.setFocus();
				stage.addEventListener( KeyboardEvent.KEY_DOWN, showPreviosOrNextWidget );
			
			}
			
			protected function selectOptions_changeHandler():void
			{
				model.navigator.navigate( selectOptions.selectedItem as NavigationItem );
				
				selectOptions.selectedIndex = -1;
			}
			
			protected function selectOptions_creationCompleteHandler():void
			{
				this.selectOptions.selectedIndex = -1;
			}
			
			protected function selectedWidgetsList_itemClickHandler( event:ItemClickEvent ):void
			{
				model.maximizeWidget( event.item as Widget );
				
				selectOptions.setFocus();
			}
			
			protected function showPreviosOrNextWidget( event:KeyboardEvent ):void
			{
				// show previous widget (CTRL-LEFT)
				if ( event.ctrlKey && event.keyCode == Keyboard.LEFT && !( event.target is InfItemClickList ) )
				{
					model.maximizePreviousWidget();
				}
				
				// show next widget (CTRL-RIGHT)
				if ( event.ctrlKey && event.keyCode == Keyboard.RIGHT && !( event.target is InfItemClickList ) )
				{
					model.maximizeNextWidget();
				}
			}
		]]>
	</fx:Script>

	<!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: -->
	<!-- Views :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: -->

	<s:HGroup id="leftGroup"
		height="100%"
		width="100%"
		paddingLeft="15"
		paddingRight="29"
		paddingTop="-3"
		clipAndEnableScrolling="false"
		gap="24">

		<s:Group minWidth="100">

			<!-- Results Count -->
			<common:InfLabel 
				minWidth="200"
				text="{ model.filterActive ? model.resultsCountMessage + Constants.SPACE + Constants.SPACE + resourceManager.getString( 'infinite', 'workspacesHeader.filtered' ) : model.resultsCountMessage }"
				styleName="lightGrey"
				paddingLeft="2"
				paddingTop="8"
				visible="{ model.showResultsCount }" />

			<!-- Loading Data Feedback Indicator -->
			<busyIndicator:BusyIndicatorLabel id="loadingDataFeedbackIndicator"
				styleName="loadingDataBusyIndicatorLabel"
				left="1"
				top="5"
				message="{ model.busyIndicatorMessage }" />

		</s:Group>

		<!-- Remove Filters Button -->
		<s:HGroup 
			height="100%"
			paddingTop="6">
			<common:InfButton 
				label="{ resourceManager.getString( 'infinite', 'workspacesHeader.removeFilter' ) }"
				styleName="filterButton"
				enabled="{ model.filterActive }"
				toolTip="{ model.filterToolTip }"
				click="model.clearWidgetFilters()"
				visible="{ model.filterActive }" />
		</s:HGroup>

		<!-- Spacer -->
		<s:Spacer id="spacer"
			width="100%" />

		<!-- Options Navigation -->
		<s:DropDownList id="selectOptions"
			width="80"
			dataProvider="{ model.navigator.actions }"
			labelField="label"
			focusEnabled="false"
			styleName="optionsDropDownList"
			change="selectOptions_changeHandler()"
			creationComplete="selectOptions_creationCompleteHandler()"
			itemRenderer="com.ikanow.infinit.e.shared.view.renderer.DropDownListItemRenderer" />

	</s:HGroup>

	<!-- Selected Widgets List -->
	<common:InfItemClickList id="selectedWidgetsList"
		dataProvider="{ model.selectedWidgetsSorted }"
		styleName="workspacesSelectedWidgetsList"
		labelField="title"
		width="{ spacer.width }"
		focusEnabled="false"
		horizontalScrollPolicy="off"
		includeInLayout="{ model.maximized }"
		horizontalCenter="128"
		verticalCenter="-2"
		itemClick="selectedWidgetsList_itemClickHandler(event)"
		contentBackgroundAlpha="0"
		itemRenderer="com.ikanow.infinit.e.view.dashboard.workspaces.header.WorkspacesHeaderWidgetItemRenderer"
		selectedItem="{ model.maximizedWidget }"
		visible="{ model.maximized }">
		<common:layout>
			<s:HorizontalLayout 
				gap="10"
				requestedColumnCount="-1"
				requestedMinColumnCount="-1"
				variableColumnWidth="true" />
		</common:layout>
	</common:InfItemClickList>

</component:GradientContainer>
